Hey, don't merge that. I think it's not working
i'm glad you made it
too late
what's the problem?
kanbot isn't very talkative
think it needs an upgrade
he's just shy
talks JSON I guess
assume it's because i'm rather intimidating
I made it "~0.4.0 ~0.6.6" because I thought the space means "or"
means and so that predicate will never pass
oops
fix incoming, or want me to do that?
whatever's convenient. I'm trying out https://github.com/iriscouch/kanso/commit/8b2caa3 now
I'll let you test and send a pull req if that's ok
don't mind the dev branch being broken until then
Yeah. `npm link` doesn't check it as carefully as `npm install`
ah, one more question: how to make kanso coffee precompiler not to hide errors? I have a syntax error in the file, do a "push", it compiles and the push fails at properties/load because it can't load the module (which has an error). It says nothing about the syntax error itself.
that would be a good feature to add
https://github.com/kanso/kanso/pull/342
i'll look into adding that.
or if you want to add that and send a pull request, the source is here: https://github.com/nrw/coffee-script-precompiler/blob/master/src/compile.coffee
Everything from my checklist is now checked off. Since we last spoke: test on Linux, install from a GitHub auto-tarball, install from an npm package
great
I'll look to do a release soon
to test a few of my recent refactoring too
--global install https://github.com/iriscouch/kanso/tarball/v0.1.2-npm2
--global install gonzo
(my fork of Kanso. Get it? Wocka wocka! Whoops, wrong muppet.)
okay, thanks, i'll see what I can do
Maybe not necessary but remember to change the version in package.json. right now it's got the -npm suffix
will do
comment: I would hope to close issue 339 before the release
not a show stopper
yep, looks like #339 should be looked at before release
ACTION assigns to 0.1.2 milestone
hmmm, the very end of this file clearly shows that the errors are being handled...
weird
to think of it… i think i get a line number when i have  syntax error.
ACTION tests that
i do get a helpful error message...
error on line 79: Unexpected ','
are you seeing?
nothing. If i compile from command line i see "Error: In lib/types.coffee, Parse error on line 59: Unexpected ','"
I do push I see
lib/rewrites.coffee
lib/shows.coffee
lib/types.coffee
lib/ui.coffee
lib/updates.coffee
problem whatsoever, except for the load phase where kanso dies
Error when running postprocessor: "properties/load"
Error loading: undefined
not require module: lib/types (from: lib/app) - Module not found
hm
yeah
need to find a way to reproduce that bug...
0.4.12
coffee
was updated like 2-3 days ago
version of the coffeescript precompiler are you using?
"module not found" bit makes me think you're not getting compiled.
0.0.5
that's probably it
that
install -f
think
:)
ACTION hopes that works
ah, since fetch is gone I forget that
changed the compiler yesterday
now grabs a coffeescript kanso package
… and it's quite a bit faster
-f doesn't work either
?
what you mean by doesn't work
oh
:)
well, it says everything already exists
ok
clear-cache
hmm
-r packages
install
?
just rm -rf the packages/coffee* packages
had this with fetch btw, and just removed the packages dir
kanso install again
yeah
to find an official way
right, I know why...
because the existing version satisfies your dependency info in kanso.json
clear-cache doesn't cut it
no need to fetch a new one
ah, I see
update kanso.json to require a new version and "kanso install -f"
rm the old version
well, there could be a reason behind that
it'll fetch the latest
version is 0.0.7
(of the coffee-script-precompiler)
it needs a 'update' parameter
okay, thanks
yeah, I think I'll add a "kanso update" command
something
+1
it'll still follow your requirements in kanso.json, but get the highest available version
run `kanso install -f` more than `kanso install`
the highest available version does not match the one in kanso.json it'll print a message telling you theres a new version available
...something like that
i like it
anyway, for a future release I'm afraid
cool
0.1.2 will never get out
:)
yeaaaah, now it shows me the error
problem solved?
on the edge, eh
don't hesitate to report an issue if you find any problems with that compiler. :)
that's my favorite joke (myself being a russian): "Real Russians play Russian roulette a real russian way - not with a revolver, but with an automatic"
you're guaranteed if you start using something that's around 0.0.x version, but it's so much fun! :-)
to the new channel dch
hey!
looks awesome. Amazing!
:D
want me to file an issue about 'update' command?
sounds good
i'll upvote it :)
didn't github get rid of that feature?
anyway, your 'upvote' is noted
i'll upvote in *here*
ACTION points at heart
haha
kanbot, he does all the actual coding
has easily surpassed any of the other partial frameworks
i'm proud of you
I can no longer wrap my simple brain around it quickly :-(
I'll ping you sometime over new year to look at how we can bundle it on windows.
awesome
suspect I'll need to do some work to make that happen
fact, I *know*
is working better, buts its still very awkward.
yeah, we're following npm's lead here
need to update kanso to use the new tar module from npm
think the simplest way forwards for couchdb + kanso will be to use the mozilla build tools chain.
msys, basic unix tools, 7zip etc.
one tidy download.
nice
sounds good
I have erlang building with it, then couch can be done that way too.
toolchain is the plan -> install less
run, making PORK PIES today http://www.them-apples.co.uk/2009/06/how-to-make-pork-pie/
:)
enjoy!
you like pork this is an easy recipe and you will become a cooking star!
yes I will enjoy.
done. #343
ACTION drools bacon fat
that, you're getting the channel all greasey
time to leave the chan free for real workers
:-)
ACTION washes hands
dch
its your face needs washing!
ciao
ACTION just got burned
yeah, you did
ok, I'm going to get some sleep
you later
btw,  I totally dumped the windows as a platform for development. And you know what, the kanso was the last nail in the coffin. I tried to get the node together, then this, then that, then used a few dense words to describe the situation and installed MacOS/X on my PC.
welcome to the non-windows world
it's a happier place
well, I'm a unix guy
on windows is a nightmare
for side projects I was using windows
interesting
don't hear that often ;)
even developed for unix in erlang, running erlang under windows on my PC
*this* is why we need windows support
it turns out they're not all the drooling gui users you might expect ;)
company still uses exchange 2003 and thats why i can't dump windows altogether yet
Outlook doesn't work with it
well, actually windows has a much superior I/O subsystem compared to Linux
ports and all that
it's actually an operating system based on Node.js since 1993 :-)
NT I mean
on that bombshell, I'm actually leaving the channel
'night
i'm off, too
using the node-couchapp kanso package?
hey
just kanso created an app
hi
what's the bare minimum I have to change to get it working?
works after install
create proj
proj
install
push
should run
TypeError: Bad argument
Object.exists (path.js:406:25)
hm
kanso?
what command?
looks like the error i get when kanso install fails
i try to push an app
you on dev or master?
idea
did you install?
think from the then dev branch
was right before the new version was official
kanso should fix everything :)
you want the most stable experince you should install from master and follow docs on kan.so
http://kan.so/install
probably just need to reinstall
you still have the repo clone available you can just git pull && make reinstall
git checkout master && git pull && make reinstall
➜  kanso git:(master) make && sudo make install
submodule update --init --recursive
Needed a single revision
to find current revision in submodule path 'deps/node-csv-parser'
*** [submodules] Error 1
pull?
be easiest to just start fresh...
did
it's a fresh clone
let me try...
this time, apparently
worked as well
like the problem was outdated kanso/node
npm support coming soon...
is up =]
locks: i can't seem to point a custom domain to my iriscouch rewrites… i assume i missed a step. do either of you know how to do that?
there's a vhost config
you tweak that?
hm, I tried using vhosts for pretty links and messed that up, so no idea :p
it's a couchdb config
futon, i click "configuration"
i edit this on iriscouch?
yes
on my machine?
ok
iris
so, in configuration, under daemons...
is a "vhosts" attribute
defaults to this:
{couch_httpd_vhost, start_link, []}
that what i need to edit?
i think so, i'm need to refresh my memory… looking
:)
for your help
http://wiki.apache.org/couchdb/Virtual_Hosts
to help by pointing to docs ;)
failed to find anything conclusive while googling
saw that… how does that relate to iriscouch?
assumed local.ini was a different affair...
oh
it's the same thing
you edit the config file by using futon
in json
yep
sweet
is if you have write access
you. :)
np
do
can try it locally by editing /etc/hosts
figured that part out. :)
you don't want to muck something by mistake
iris supports ssl too
it's good to auth via ssl if you remember to
i.e. if you are doing auth over http consider your password compromised
must be editing the wrong setting...
is fine if you change your password every day, but usually not ideal.
i'm getting "this setting is read only"
oh
it's vhosts under httpd
see
might have to create it
oh?
i just add "vhosts" to the root?
config?
vhosts to httpd i think
like the wiki
:)
i'm not being that helpful
found what i need in the wiki
i'll know if it worked when this cname's new settings propagate
you get it work locally?
yes
:)
cool
just don't know if i shouldn't point a cname to mycouch.iriscouch.com.
either that or an A record?
hm
is better bcuz it's on AWS so… ip might change?
err, EC2 rather… you get my gist
says to use cname here: http://getsatisfaction.com/iriscouch/topics/custom_domain-hslrb
yes
yep
i have everything working
<3 iriscouch
likewise
is a minor bug when you set vhosts. It is better to use cURL vs Futon
oh
rats
if you use futon, just do: curl -X PUT http://foo:bar@example.iriscouch.com/_config/vhosts/blah
can literally use "foo:bar", the only thing is to send a PUT to vhosts so the front-end will re-check the settings
:)
bug is, if you use a browser with HTTP 1.1 keepalive, the front-end won't see subsequent requests after the first
Is your coffeescript compiler on github?
trouble getting a preprocessor to run in an app
yep
i'll link you
https://github.com/nrw/coffee-script-precompiler
you updated it?
changed it quite a bit 2 days ago
just want to see how you're doing it
have a build process to generate some javascript
I want `kanso push` to run the build and then copy in the output
hm
it won't run my preprocessor. I'm wondering if it doesn't work from a top-level kanso.json, only from packages
https://github.com/nrw/coffee-script-precompiler/blob/master/src/compile.coffee#L58
is where i compile
else PEBKAC
i'm grabbing the js from stdout
don't entirely understand what you're saying :)
want to copy the output from where to where?
Yeah, sorry. https://github.com/iriscouch/browser-request
is a 100% browser-side library
simple rakefile makes the various "builds", e.g. CommonJS, RequireJS, and just a big monolithic concatenation
want a kanso app that just attaches these into couch so I can load them from a browser
ah
you want them to be attachements
i.e. when I type `kanso push` I want it to run rake and take the output files and stick them in the attachments
yeah
that's what the "attachments" methods of my compiler (and the less precompiler) does.
added "preprocessors":{ "compile":"build/compile" }
file doesn't even exist, but when I `kanso push` it runs with no problem
hm
mean, it runs without an error... which is a problem!
don't know why that works. :)
Do you `kanso push` from the coffee-script-precompiler project
yes
wait...
no
like, for testing
yeah
you depend on it from different projects and exercise it that way?
kanso push another project that uses the csp package
yes
had the exact same problem with Ender
can't actually build your code from your own project. You have to publish it to npm then import it in a different proejct
how can I know if it's worthy of publishing!?!
:)
= package manager for the browser?
browser js...
n/m i found it
http://ender.no.de/
think it would be simple enough to add the ability to output a project to something other than couchdb.
browser-request looks very cool
I want is a static file web server
to test the requirejs builds of browser-request
suffices and of course I have it running
kanso is just the tool to drop a bunch of files into couch as attachments
that's how i understand it :)
is, of course, the authority on kanso...
glanced at the code and I think it's a bug
only files that even mention "preprocessors" are the ones for `kanso ls`
the one for importing a package
is kewl
hmm
doesn't bode well :)
caolan's twitter feed tells me he's presently flying from san fancisco to london… so you may have to wait a while for an intelligent discussion of this issue. :)
gotta run.
for now
thanks!
jason, you changed the tar cmd recently?
publish fails :(
Hm. Maybe. If there is a bug then no I didn not
hehe
Hey, you're running the dev branch?
point...nope.
just remember a tar -X change  and thats whats dying on my macbook
made a change to tar on OSX, yes. Should only be in the dev branch though
course my change was to *fix* a failing tar command
-X: Cannot stat: No such file or directory
like the issue?
yeah
that's the bug
I will pull that fix in
Fix is here https://github.com/kanso/kanso/commit/194874d2c7a94ed4bbe34185534a10de2e7df8c9
thx
to push this as a kanso package https://github.com/ryanramage/couch-audio-recorder
be so amazing for everyone :)
made the documentSelector working? for some reason it renders server-side and the result comes out empty.
haven't played with that feature
with it the whole day
'npm search kanso' returns results, is it up to date?
hi
anyone use 'kanso upload'?
yes
i use kanso upload
and if you have a question about it, it looks like we'll have to do it later. :)
are you still hacking on the coffee compiler? i'm not getting the results i expect from adding `"modules_attachment": false`.
to everyone: are there any known issues with the "modules_attachment" setting in kanso.json?
ack. i think i have a work around. nevermind.
hi, I didn't quite understand the effect of modules_attachment
i did find a "solution" but i don't know if it's the best way to do it...
can just *not* load coffee-script with 'modules'
omits it from all design and attachments processes
there any reason one would want to use the coffeescript package on a live site?
only use it to compile before i push an app
wouldn't have thought so
well, i've just removed the ability to require("coffee-script") from a design doc… we'll see if we get any complaints :)
if you rm -r packages/coffee-script
then kanso install
you'll get the new versions
believe that takes care of the issues you brought up
… i suppose you'll have to rm -r packages/coffee-script-precompiler as well
Sweet!  One small problem is that you didn't bump the version number so I had to "kanso clear-cache" before it would download the new version
did bump the version of the compiler. the 'coffee-script' package version tracks with the version of coffee-script it uses...
i my hands were tied.
:)
Tricky
js veterans around?
journeyman
there a handlebars helper that joins elements of a list by a passed in delimiter? or do i need to write it myself?
i'm trying to do this: https://docs.djangoproject.com/en/1.3/ref/templates/builtins/#join
ACTION hopes there are handlebars users in this channel
and JasonSmith: you're the kanso officials present, yes? i may have just caused a problem. i forked handlebars-helpers and accidentally pushed changes to the kanso/handlebars-helpers repo instead of my own copy.
added a helper that works and is documented… but i didn't clear that with anyone…
should i do? :0
:)
the github/kanso repo?
yes
https://github.com/kanso/handlebars-helpers/blob/master/build/helpers.js
i don't think it will present any major issue because kanso install won't grab from there?
didn't think i had push privileges… :P
right
wont
hm
was planning to submit a pull request
now sounds like you want to submit a code review instead?
caolan (or whoever checks pull requests) could review my changes.
yes
i rollback my changes and push again
send a pull request?
if they don't break anything...
(which mucks ups the history a bit...)
ok
can i flag this as "please review"?
i should open an issue? "pushed when i should have sent a pull request. please review latest commit"
?
would just stick a comment on the commit
ok
for calming my anxiety :)
patch ;)
thanks.
this a typo? {{#join people delimiter=" and "}}{{name}}, {{age}}{{/join}}
nm
think no
gothca
bleh
:)
#join /join
mustache/goatee
sheesh
cumbersome?
naah
joking
phew!
:)
would hate to go on without your approval :D
pfft
there sample duality app I can look at?
yeah, the site is one
https://github.com/kanso/wiki
any luck finding an example app for duality?
have one I that is pre-1.0 and could quickly upgrade it...
fwiw https://github.com/mandric/pages
should work better now, I forked the admin and fixed a couple minor things.
autopush was removed?
i'm working on a compiler for eco templates. I'm trying to base it off of the handlebars package...
i'm stuck
:)
know what happens to a template once it's precompiled?
hey
also, i'm not sure what the purpose of "registerTemplates" is.
hi there.
it's been a while
:)
so... you want a package to pre-compile eco templates?
think so
:)
good to me
there's no sense in compiling them every time they're requested, right?
right. which package are you working from?
https://github.com/sstephenson/eco
did you mean a kanso package?
yes, sorry *kanso* package
would have me kicked for that
kanso/handlbars
kanso/handlebars
is
https://github.com/kanso/handlebars
:)
so where are you stuck?
have the code open
a template is compiled, it's added to the design doc under the key "handlebars"...
right?
i'm trying to figure out where to put compiled templates and how to get them back out.
appears that we just stack all templates up under one key? no?
that what this is doing? https://github.com/kanso/handlebars/blob/master/build/utils.js#L43
ah, right
module actually adds them to the 'handlebars' commonjs module
ah
you can do require('handlebars').templates['example.html']()
ahh
see
might not want to do that though
yeah
could add them as separate modules
you could just leave them attached as .js files
just means you can't use them server-side
you want to render a fall-back page
would like to have them available server side
eco looks a lot like what you are building with "addTemplate"...
sec
append them to your 'eco' module, or add new modules for the templates
http://pastie.org/3132405
right, so it adds window.ecoTemplates
contains your compiled templates
i put this in a module, it will be at module_name.ecoTemplates...
problem is, inside a commonjs module 'this' is not the window
right
ok
that won't get exported
its useless
oh
crap
think you might want require('eco').ecoTemplates
can wrap the compiled functions in another closure
hmm
understand how to get access to one template, just not a group of them. :)
that what you're hmming about?
would add somehthing like this to the eco commonjs module in your build step:
(function () {
    ... compiled eco template functions ...
}).call(module.exports);
ah
that to the source of the eco.js module
then "this" is module exports
you can do require('eco').ecoTemplates
see
anonymous function voodoo
thanks, caolan :)
:)
can you try uninstalling kanso and doing "npm install -g kanso" instead?
could use someone on mac trying this out
sure
install -g kanso seems to just sit there...
versions of node and npm ?
1.0.22
v0.4.11-pre
like npm is just hanging
I'm on node v0.6.6 and npm 1.1.0-beta-4
can you install other modules?
got some errors
finally
sec
it might be permissions errors because that's trying to install kanso globally
i have NODE_PREFIX set
"sudo npm install -g kanso" is actually what I ran
err, $PREFIX
hm
have everything installed in my user dir, e.g. /Users/mandric/local/node/bin/npm
oh, right
me paste the error, it looks like an incompatibility
https://gist.github.com/1567649
oh, the parser module requires node 0.6.x
hmm
that ok?
what do you think about keeping support for node 0.4.x?
guess if you want to require 0.6 for kanso?
think I'd be ok with that
0.6.x is a stable release series
fine by me
that case, would you mind upgrading and trying again? ;)
could still always do a make for 0.4 right?
at all
well, they could still use an old build I think
major incompatibilities
would be cool if we could support the make build i guess on node 0.4.x?
I'll probably just say "use kanso 0.1.1"
ok
you'll have to hang for a minute while I upgrade node...
sure
i am complaining about binaries not being available and now i'm compiling node so it installs in ~/local instead of installing the binary package that uses /usr/local/bin.  i'm a purest in the sense of not using root if it doesn't need root i guess.
i just don't know how to tweak the node installer
:)
could probably just cp it but i have a feeling they path is hard coded in the installer
finished
1.1.0-beta-4
nice, a status message npm http GET https://registry.npmjs.org/kanso
$ kanso -v
0.1.2
good
see if i can push something
Error: Cannot find module 'kanso/modules'
right, some packages had to be updated to work with 0.1.2
just be that app
one seemed to work ok
probably just need to delete your packages dir and re-fetch the dependencies
Backwards Incompatibility notes please ;)
ok
yes, I'll add some notes to the release announcement
scares me a little but it's committed to git anyway
package mgmt todo here...
had some local packages so not in kanso install
ok
err, kanso repo
was the orig error fwiw https://gist.github.com/1567738
i'm rebuilding packages/ fwiw
i had to reinstall properties, modules, attachments, settings, cookies, duality, dust i think
good tho
ok
drafting a release announcement now
woot
whole slew of node_modules dirs and files… the node way.
yep, we're trying to follow node conventions... kanso predated all that
i saw a discussion on that somewhere, here or ML
maybe
the global modules are dead post by mikeal
there a way to inlcude the version of kanso in the json file?
let's say you have an app you don't want to upgrade but want to "require kanso == 1.1" dunno if that would be useful
sort of stuff would probably be useful
this point it's probably not an issue
currently supported though
free to add an issue on github though
where you would include that definition...
can also put it in lib/app.js somewhere or whatever module you load...
is the version number saved within kanso? and how would you access it in a common js env?
just stored in package.json atm
bbl
i have eco templates working, but i'm not sure if this is a terrible way to do it. :)
i'm adding each template to modules, and wrapping the compiled output in:
module.exports = function(value){
value;
}
then i use them like this
$(".foo").html(require("path/to/template")(context))
works...
it a bad idea? :P
reasonable to me
either that or append them to the eco module itself
think your solution is fine :)
*phew*
again.
:)
JasonSmith: i'm attempting to install kanso with npm. `sudo npm install -g kanso` is grabbing kanso version 0.0.7
i need to update a package list or something?
-v v0.6.2
-v 1.1.0-beta-10
hrm i can try
for me
$ kanso -v
0.1.2
try npm cache clear kanso
ok, so its my setup...
i'll try it
think so
hm, try npm -g uninstall kanso
-g ls
how things look
the reason I wanted to *switch* to kanso is so that manual installs don't interfere with upgrades :)
this is npm -g ls
http://cl.ly/1Y3s0g1p0c3h0r1d3L3Z
kanso is not installed with npm?
http://cl.ly/3E1P1F0g0E1B2m033f3s
no
is not installed
last screenshot is what i get when i try to `npm install` it
need no >= v0.6.6
err, node
ohh
hm
can't `brew install` that
:P
you'll have to consult brew for that ;\
:)
just compile it
i'm gonna try editing the 6.2 script
that's 0.6.2
or do a ./configure && make?
source etc, works
that's all a brew script does :)
right
sometimes it's hard to push that through upstream
are good. i'm not a brew user and compiled node against the xcode libs.
it's unfortunate since in the install doc we recommend brew install couchdb
not there yet ;)
close
ack. couchdb via brew has broken regexs
:)
don't do that!
damn
need to take that out then
i just updated the node brew script to the current version and it worked
:)
for your help
great
(thanks to JasonSmith too) :)
how did you install couchdb? build-couchdb scripts?
yes
build-couchdb is just excellent
agree
still not ideal 5 min install… but works
in 5 minutes is better than broken in 2 :)
gotta run
you later
mandric: the latest kanso (with all packages updated too) broke a few of my requires. do you know what i should use to replace `require("kanso/logger")`
?
you might need to replace some packages
the ML there was a list, i just rm -rf'd those and did kanso install to fetch new ones
did that
a i cleared the kanso cache
i'm on all of the latest versions, but kanso/logger seems to not exist
hrm...
ACTION pokes around in the less-precompiler to see what it's using
oh
it's just doing 'console.log'
that answer my question?
is using kanso/logger?
coffee-script-precomiler is
less-precompiler used to use it
it just uses "console.log"
kanso/utils is also missing
(i switched coffee-script-precompiler to use console.log
)
kanso-utils
named
:P
see
it's kanso-utils/utils
;\
hm...
that's not working for me...
Error: Cannot find module 'kanso-utils/utils'
i need to add it as a dependency in kanso.json?
less-precompiler doesn't have it there...
i see kanso/lib/utils.js and kanso/logger.js
err, kanso/lib/logger.js
ah
i'll try those
there also a kanso/lib/modules.js?
hm
no
have logger and utils playing nice
just need the new require for 'kanso/modules'
doesn't appear to be "require("modules")"
= require('kanso-utils/modules') ?
Error: Cannot find module 'kanso-utils/modules'
i'm a little confused how this works myself
see that the less-precompiler just has it's own set of local node_modules
yea
would be an easy workaround
think that's the major change, each package has it's own node_modules
node way
err, modules are local to each package
yeah
global modules
:P
but stable
meh
took care of it
just did `npm install kanso-utils` in the compiler directory
ah
this works require("kanso-utils/modules")
cool
for modularity
see the benefits
ass though
i don't have to manually maintain a "coffee-script" package to be used by "coffee-script-precompiler"
the ability to package up bits of funcionality
yeah
cool
this api is getting more stable it seems
early and often
wow
is amazing
coffee compiler is now 5 times faster
rather, it compiles in 1/5th the time
sweet
wow
astonishing
wow
ACTION beams
npm module is probably optimized or something?
yeah
guess
:P
i'm skipping all of the trips to stdout
is probably a big part of the speed increase
i must retire… more tmrw
you
woo
the kanso site is looking gorgeous
I'm gonna put some time into getting you those couchdb ubuntu debs this weekend, though.
then try to take kanso for a spin myself.
awesome, thanks
really need a good package and then to drive a plugin system into 1.3
I want couch as an app server very badly.
are your thoughts for the plugin system?
baked enough to discuss quickly.
I'm about to run out for lunch.
haha, ok
by that I mean the thoughts, not me, aren't baked enough.
to be clear.
people viewing couch as an app server is good news for me :)
oh, I had a question about the docs
yes, I assumed you meant the thoughts ;)
kanso
yep
Can't figure out what exactly "load" does
load directive, which gets you your views.
that a way to inject properties into the design doc rather than attachments?
yes, it's used by the 'properties' package to tell it which commonjs module to get design doc properties from
bit like telling node.couchapp.js which app.js to use
see. I dislike the property/attachment dichotomy. I'd rather see the whole design doc as attachments.
the python tool?
well, views right now must be in properties
it's an issue wit hthe couchdb query server
right, I see
I've been thinking a lot about next gen query servers, as you know
step I think is to deprecate the current configuration that says "language = /path/to/command"
need full erlang modules there
default module could take an argument for a path to a command that runs the old query server api
new modules could do other things.
wow, that could get very interesting :)
think as we clean up core couch and url dispatch separation other possibilities open up for handling requests that don't force us to abandon the old api
we could continue to have the query servers people are used to
but, for example, you could implement an erlang port driver which uses libshm to communicate with query servers (and a libshm shim on the other side so old query servers would work) and eliminate stdio
even more interesting, I would like to mess around with pypy's translator generating shared library sandboxed targets
just run sandboxed queries in process
is all ambitious, and I'm totally overcommitted as always, but these are the kinds of possibilities I'd like
:)
I'm first interested in changing the binding between the current query server setup and the configuration system, so that other paradigms can be swapped in.
think that's the path
yes, that gives you space to experiment without breaking everyone else's applications
yep
worry is that it'll move away from a single app format
then if we get a nice plugin system for 1.3, space to distribute those experiments without requiring people to rebuild couchdb
that's one big win for couch as an application server right now
noted
thing that would be really useful is an easy way to install backend processes
email, image resizing etc
at least to require them in the app... I had a few ideas for that part
i'm interested
them in the app is a really interesting idea
an app can say "I need to send email", and query couch to see if it can do it
brb
want to get around to replying to the dev@ email about plugins, but it's a hefty one.
doesn't have to be built into couch itself
point
ideally, I'd like something like http://kan.so/packages but listing backend processors
you open up futon or something and click "install image resizer"
anyway, I'm not baked enough either ;)
it's hard to install backend processes that way because they may need compilation.
although, they could be implemented in dymanic languages.
<shrug>
we're too far in the future
yes, I realise there are some big hurdles getting to that point
need to start checking myself when I dream too far ahead.
that stuff is better left to the OS: apt-get install couch-emailer
hypothes.is stuff begins this week
coding
I'm looking forward to slowly removing all the warnings and notes on the install couchdb section of http://kan.so/install
you're .deb will help with one of them at least :D
*your
apt-add-repository, apt-get install couchdb
hope
alright. i gotta run.
too
look forward to your fully baked ideas on couch as an app server :)
laters
hah
later
do you ever use the kanso db module's "changes" feature?
have not, yet
i'm having trouble with it, and i don't know if it's me of if the module is broken
:)
rats
i'll have to wait for caolan to come around, then. :)
might write the ML
shall
have you ever used the follow package?
no
why?
i think that is what kanbot is using to follow the _changes feed
nothing to do with the db module
does give you the ability to follow _changes
wow
i not post to the mailing list until after i try that?
just post
ACTION looks at his nearly finished post
shed light
can always answer my own question later
:)
yea
i'm curious also
need it sooner or later
is this "follow" module?
don't see it here: https://github.com/kanso
just did npm install follow
ahh
it's not a kanso module
explains it
:)
it's what kanbot uses
ACTION looks at kanbot
sure if it's browser compatible but you can play with it in node at least
looks like jhs wrote it. it's probably excellent
:)
it is
https://github.com/iriscouch/follow
it's browser compatible (beta)
:)
i'm looking at your package "follow". https://github.com/iriscouch/follow. is there any reason this won't work on a pure couchapp via kanso?
i'm not sure which parts are essential for use in the browser
caolanm!
hi
hi
seen your email to the list
ACTION plays it cool
like you're using it right to me
hm
would i only get one change...
you see the second request to _changes in the console?
can i see the changes console?
also, remember resp.results can contain multiple changes
in your web inspector to see if the next ajax request is being made
chrome: ctrl + shift + I, then click network
ah
might have to refresh
i've never used the network tab before. :)
very useful :)
was planning to change the api for this changes function btw
was written before we had the events module
I think it should be an eventemitter
damn. the changes response does arrive
oh?
feed = db.changes(q);
feed.on('change', function (resp) { ... })
feed.on('error', ...)
will be nice
feed.end()
something
be easy to port existing code to, so no reason not to start using the current api
you're getting the next response?
yes
no...
it's status code is (pending)
oh, so it's waiting for new data
another change?
yeah… should it take 4 minutes for that json response to go from my local couch to my browser?
uh?
mean after you make a change it should take 4 mins before the changes function is called?
no
is called right away
the status codes don't seem to resolve to "200" for several minutes
it's waiting for new data?
does that mean?
it makes a request to _changes, the connection is kept open
a change occurs or it times out
oh
it returns and a new request is made
is long polling
that's not "a change has occured, here's the data"
it's "i'm just checking the changes feed, there may or may not be changes"
a request to _changes just means "I'm waiting for new data"
ok
that's "pending"
yes
i'll get the hang of this
:P
it returns as 200, that means "I have new data for you"
think after around 20-30 secs the request will timeout and return whether there is any new data or not
it'll open a new one
ok.
i'm still getting the effect i was getting before...
may have misunderstood what i was looking at in the network tab
actually, make that 10 secs for the default timeout
then it reconnects
right?
ok, so you see the first request to _change resolve as 200 with some new data
you're seeing a new request, but it's not returning 200 within the timeout
?
actually, i can't reproduce that
get no 200s
…from _changes
ACTION tries again
you click on it you should see the data being returned
(in the network tab)
might also be worth checking the filter your using does what you think it does
wow. this network tab is a gold mine
:)
two changes fire as expected
http://cl.ly/1T2A2j1i2o3Q0s0I1X2L
they don't contain any data...
that you have two requests to _changes still pending
you calling db.changes multiple times?
yes
this bad?
should be able to call it once and leave it running
i'm listening to different filters
then if you don't need it anymore return false from it's function
that's ok up to a point
point?
eventually you'll hit problems with the number of open requests
< 100?
think it might be a surprisingly low number, like 5
shit
:P
sure though
have about 200
so...
that's the problem :)
can i test a filter function?
right, having 200 is probably inefficient anyway
is my first experiment with them
I'd say remove the filter from the changes request
filter the results in the changes listener
ok
means you'll get notified about ever change
*every
only listen to the changes feed once
:)
yes
ACTION gets on it
that'll make this easier to debug too
well
i've just written a lovely process
goes like this:
(anything changes, ever)
then
everything again
works
:)
haha, great
a starting point at least
yes
for your help
np
like there's opportunity to improve/write some docs on using this
;)
:D
should share my eco package too...
know you're eager to use a coffeescript focused templating tool :)
yes
well, maybe someone is ;)
did you get the eco template precompiler working in the end?
yes
i'm loving it
don't know why, but they're about 30% faster than handlbars
handlebars*
precompile?
run in the browser
wow
nice
i can skip a lot boilerplate code...
they're not logicless
it's the right solution for me :)
yes, it's like erb for coffeescript right?
'eco'
oh!
yes
ruby, i assume
yeah
think something called 'rails' used it by default
:P
ACTION gets up to speed
sounds like you're defending your position on the leaderboard anyway
:)
i'll just be making up my losses...
and mikewallace were sneaking up on you
i'll be dropping that coffee-script package
oh?
npm support makes it unnecessary
i'll keep the coffee-script-precompiler
really? how?
oh! I see
had a separate package providing the coffeescript module itself
yes
was probably a bad idea all along :)
would only be useful now if you're wanting to compile coffeescript in the browser
right
probably not very useful ;)
i got from it was complaints that it was bloating the modules attachment
:)
true
I'm going to hand over the node-couchapp package to ryanramage soon
I don't actually use it myself
that's that delegation skill you're honing :)
want log4js? I don't use that either...
traditional-couchapp
boo
heh
person might have just volunteered https://github.com/kanso/kanso/issues/348
rule: you complain, you get to take on the package
:)
:D
i, for one, think every package is perfect as is.
ok, I'll settle for delusion
:)
wow. making an app "real-time" increases the wow factor big time.
i'll have you know that i have that dance competition app (that we discussed once upon a time) fully functional.
nice! that was pretty quick
a few weeks of non-stop work
:P
you had to work on the tools themselves, that's quick
were several months of designing before that, though.
chance of a demo?
hm.
worries if not
i'd be glad to show you. :)
I'm just going to steal the code and resell it to all my dance competition contacts
i'm just don't want to disappoint :)
you'll have to show it to someone at some point
know! ack!
it's only v1
push it to iris
send me the link as a private message if you like
shall
you'll have to wait for 6000 docs of sample data load, too
:)
sure, I'm just grinding some coffee beans
...not a euphemism
guys. What happened to the 'create' command of the Kanso bin with the new release ?
is now the best way for creating a project skeleton ?
hm… i don't know the answer
the people who do know aren't up yet. :)
:) Ok I'll drop them a line, later, much later ;)
i just wrote a compiler for stylus.
:)
i'm trying to add the "remove from attachments" feature, like the less compiler
docs aren't getting removed
this need to happen after some particular step?
pull the "remove from attachments" code straight out of the less precompiler… and it's the last thing i'm doing...
wow, looks like there's a bug in the less-precompiler
:)
well
must just be slow enough to not matter
yes, I think you need to wait for the attachments preprocessor to complete before running your preprocessor
at least, that step of the preprocessor
"attachements"
?
oops
i'll spell it right
right, but split your step into two parts
reason to delay the compile bit
ahh
now you have two preprocessors
to compile and add the compiled css
another to remove attachments
second one needs {after: 'attachments', run: ...}
now I'm going to update the less package to do the same ;)
i'll race ya
:)
grr
win
:)
\o/
just finished
i haven't packaged this to share, yet.
time!
ACTION shakes fist
duels
even tested it... a bit
assure you mine will be *thoroughly* tested
:)
hey, I don't see your eco package yet either
i'm not sure how i want to share that...
use it as a precompiler
i rob eco of a lot of features (that people may want) if i don't include it in modules
think i just told myself to publish two packages...
for the browser, and one for precompilation
(sigh)
yes, two packages sounds like the way to go
heat has it's own controller. every time a controller was triggering "render" it added another listener for "render"
gets out of hand fast
:)
guys, wrong window
i have another _changes issue… after the first change notification arrives (on mobile safari) the browser's "loading" indicator spins indefinitely.
…and it's making testers nervous. :)
you know a way to stop the loading spinner, but keep polling?
ah yes... that's annoying
I'm sure there are some solutions to that
any known workarounds?
i've been googling feverishly
:)
… and had no luck
off the top of my head
drat
this something I want to hear?
love problems with no workarounds
:)
you long poll the _changes feed
safari's spinner runs indefinitely
oh. :-P
my kind of problem
for the consideration, anyway :0
:)
I'm curious and may care in the future.
not a problem I feel very powerful to fix
any news on those debs?
feeling the hurt from #couchdb on that right now
think I may have taken the last kinks out of my ubuntu packaging
for it to build right now
great
wheeee
with me!
:)
told Bob N. the next couch release should be subtitled "Ride with me" but I'm not holding my breath. :)
I'm in
eckoit
yay
\o/
on IRC means you are 1337
yes, although just logged in via webchat...need a real client
suggestions?
uh, I'm the wrong person to ask
?
think jhs macs it
ping him
d'oh he just left the channel
well, 30 mins ago
nrw or mandric is here to answer my mac questions ;)
to compare kanso package contributors to others in here....
matching up :)
introductions?
should ask people to enter their irc nick when they sign up
I think most people are just lurking right now ;)
I'm adding READMEs to packages that are still missing them
I'm responsible for too many packages :(
will do so for my one outstanding package
urls
I use irssi for irc, but it's terminal based
just need to desktop notifications
activity
http://www.quora.com/What-s-the-best-IRC-client-for-Mac-OS-X
ok, everywhere I look says Colloquy
installing
arrived :)
bbl
ok, goodnight all.
in a while, when I visit https://kan.so/packages I am greeted with an "Invalid Chunked Encoding" error
yeah, I've seen that before
really can't seem to work out why that happens
strange that it's intermittent
the console error been solved?
code should (and usually doesn't) get called
*shouldn't
see no way that the server-side should execute that code
its a more fundamental problem than taking out console.log
code just shouldn't be running
are you guarding the console.log?
the server side?
happens inside an event handler for an event that is emitted client-side
arg, flaky connection
ACTION is considering a kanso screencast
ogden did one for node.couchapp.js that's cool http://vimeo.com/26147136
wow, and about 4000 plays
bad
now that video can work with kanso anyway :)
anyone in here using the autocomplete feature of kanso?
you can tab-complete commands and filenames etc
nope. not sure how to use it even
wondering if it should install automatically when you install kanso
only problem is that it edits your .bashrc
only get bash autocomplete
I'm just worried about editing peoples config files without asking
suppose I could get npm to run a script on install that asks if you'd like to install autocomplete support
yup, maybe just have doc on the wiki telling them what to do
right, I can make it entirely manual
there's a doc the wiki now ;)
(it's out of date though)
doing that means almost nobody will use it, and it's really useful!
have looked at the wiki a fair bit, but overlooked it. Needs to be bigger...info box on the install page
I'm tempted to do either 1) install automatically, don't ask questions 2) ask the user if they want to install it when they do "npm install kanso"
suppose just putting instructions after the "npm install" step on the http://kan.so/install page might do it
I liked the idea of that being as short as possible
yup, don't surprise people
you check when you run a kanso command?
what?
its been installed...get a yellow message once in a while:
"Did you know you can autocomple kanso? see http://wiki./..."
basically, I think everyone is going to want it
just feel like I shouldn't edit their .bashrc for some reason
if they install autocomplete that's what'll happen anyway
almost everyone will end up with an edited .bashrc
its the people who only use it a bit, uninstall and don't know they have some lingering stuff
taste :)
yes, that's bad
could remove it on uninstall
is on "npm uninstall kanso"
you print a message during npm install?
*warning* we have edited your bashrc
think I can print a message after npm install
even do "Would you like to add kanso autocomplete support to your .bashrc?"
y/n
guys, happy new year
kika
does npm still sees 0.1.1 ?
hmm, it shouldn't do
npm -g install kanso
WARN kanso@0.1.1 package.json: bugs['web'] should probably be bugs['url']
WARN async@0.1.9 package.json: bugs['web'] should probably be bugs['url']
WARN underscore@1.1.6 dependencies field should be hash of <name>:<version-r
WARN request@2.1.1 package.json: bugs['web'] should probably be bugs['url']
run update, etc
strange
http://search.npmjs.org/#/kanso
^ that shows 0.1.2
you force it by doing "sudo npm install -g kanso@0.1.2" ?
brb
yeah, that worked
cache clean didn't
weird
ohh, kanso package markdown does not like the <pre/> tag
yeah, I don't allow embedded html
;)
picky.
um, about the prompt on npm install
good for automated systems
the automated build I got going
point
don't think I like that idea anyway
so, either install automatically (perhaps with a warning message), or don't install and show a message letting you know how to install...
do like doing it on npm install, and print a warning
think that might be the right way to do it
make npm uninstall clean it up
yup
a happy place
ok, I'm sold ;)
hey, so no way to exclude stuff on an npm publish currently?
kanso publish
one know max's source for the cvs export is?
cvs-export package?
yeah, you can create a .kansoignore file
we add the packages folder in there?
yeah, I think I'll exclude it by default in a future release
I need to add a bundled dependencies option to kanso.json first
don't think .kansoignore is actually mentioned anywhere on the wiki
fix that
you need to escape the underscore in a URL in your couch-audio-recorder readme
this: /pirateradio/\_design/...
thanks...I did notice it mangled it
that or explicitly make it a link
is a bit annoying with underscores
kanso markdown not compat with github markdown
sorry, not equivalent
quite
should be basically the same
from the embedded html bit
the underscores :)
I would like to allow, but I'm not smart enough to work around all the ways people might abuse it
really? ..I should try to fix the underscore thing
https://github.com/ryanramage/couch-audio-recorder
README.md
hmm
am a publishing machine tonight
:)
js veterans, i have a general javascript question: is there a delay between assigning object properties and when those properties can be read?
is my scenario: http://pastie.org/3170416
metakaolin huh? looks interesting
no
wow
*something else* is happening
:)
you using spine?
have no idea what else could be affecting this… i've broken it down to the simplest form.
yes, but i'm having this problem with just js
it defines setters/getters on those properties?
too
tries to sync them with the server?
hmm
of this is persistent data
what's your advice on MVC framework which plays nice with couchdb and kanso: backbone or spine ?
as the author of spine-adapter, i have to vote for spine.
:)
seems to be more popular.
foo.__lookupSetter__('name')
nrw, what do you like in spine? I like the author (just finished his book) :-)
that'll tell you if a setter is involved
thanks. i'll try it.
it's minimal.
…  and coffeescript
= lacks everything ? :-)
would see it that way
would say it stays out of my way
find backbone laborious to use by comparison
is great, sure thing
your the first person i've ever heard speak fondly of coffeescript on irc
you're*
includes conversations in #coffeescript
couchtypes play nicely with spine models and persistence? I mean if I declare a Type, can I build a Model on it's base and then sync in to Couch?
think there'd be a little boilerplate code involved
up a spine model goes like this:
I see coffeescript as a "Javascript Good Parts" book written for computers
I'd love to see use of couchtypes & backbone or spine
@configure "Modelname", "property_name1", "and2", "etc"
I'll write up my experience if I would be able to get through
and duality drive me nuts
setter is undefined
have a Type with an embedded list of uniqReferences (which should be filled with a /view when rendering a form). Heh, this stuff requests a view from the server side!
thanks
something else is happening then
i'll give spine a shot
did: console.log(foo.__lookupSetter__('name'))
that proper use?
yeah, I'd expect it to not use a setter
worth checking
indeed
i'm baffled
:P
if you get stuck, i can probably be useful.
thanks for the tips
it possible to run kanso with node v6?
now yes
0.1.2 supports 0.6.6 and later
yeah, I installed from master and I'm rockin
don't suppose you can point me any examples of kanso apps
I can read the source
haven’t worked with couchapps before and I'm a little lost at this point :)
than http://kan.so I know only nrw's port of spine.todo : https://github.com/nrw/kanso-spine-todos
kika. already devoured the kan.so docs, that app looks like a good one to continue with
it's sort of extended edition, based on kanso and spine.js framework
trouble installing kanso
anyone help?
get an npm error installing the "parser" dependency
it needs node 0.4
try
-g install kanso@0.1.2
didn't work because the version wasn't right for nod. (0.6.2 is not ~0.6.6
I just upgraded node
we're rolling
thanks
do I have to do to run a preprocessor other than add the "preprocessors" property to my kanso.json?
"preprocessors": {
        "eval": "build/eval"
    }
should be it
have a build/eval.js file
happening?
that's what I've got
see other build steps run, but I don't see that getting called
that only apply when this package is included as a dependency by another package?
you building an actual couchapp, or a new kanso module?
should I be able to just run whatever scripts I want at package/deploy time
first...only when the package is a dependancy
ah
makes sense
can I include this package from the local filesystem when building others?
test this out
yes
think I saw that on the site, but I can't find it now
an entry to .kansorc
exports.package_paths = [
    '/Users/ryan/github'
];
ahh, nice
that goes in the root of my project or in my home directory?
doesn't seem to work in the former
umm, I have only tried in the root of my project
it worked
:-/
http://kan.so/docs/Configuration_.kansorc
the root of the main project
yep. something's not right.
the module you are prototyping
I remove it from the local packages folder
you did a kanso install
sure if that makes a diff
(remove the module)
okay. it seems to find it okay with "kanso ls"
not "kanso install"
I misunderstand the commands?
oh, it runs on kanso push
never install my app, I just push it
or...
kanso show
<shrug>
huh. seems like preprocessor exceptions are silenced
nevermind
okay, getting further. can't figure out why coffee-script-precompiler isn't found
oh, need to run nistall
how do I make a duality app :)
made a thing https://twitter.com/#!/caolan/status/157914398634147840
(screencast on getting started with Kanso)
nice
give it a go
that's a neat screencast you have there
thanks
when I require a dependency that has attachments and modules, can I controll how they end up namespaced somehow?
is there a way I can require a whole other design doc?
Like, module A depends on module B, so I get database_i_pushed_to/_design/A and _design/B
also, my ppa is built
'runtime' design doc depends
than kanso push a, kanso push b
the node.couchapp module I reworked it so its a merge of the two design docs
any app is also a package though, so you can have a super-package that pulls in two apps as a dependency
that helps
explains
I get the merge to happen under a namespace, though
yet...I think it is a good idea to get standard
we should get used to namespacing our views, lists etc
Anyway. I'm liking kanso. I haven't really built an app yet, but I'm playing.
yes, I noticed you published a package
Yeah, but I'm not sure I've done that right.
It's a bit of a strange one, I've published it as a way to get code into another design doc
I think I want to just push it as its own
also, I didn't write it. just a dump wrap of an existing package.
if you do the super-package idea, would you get two design docs?
debs are ready
awesome, I'll check them out after lunch
I really like the idea of runtime dependencies and or super packages
makes the assumption of 1 app = 1 design doc
do as well
think we have to break that assumption :)
ok. why?
will give my couch-audio-recorder as an example
think i'll unpublish my package. It really should just be included inside the package I'm writing.
you can just drop it into your packages directory if you don't want to publish it
.kansorc
yes
which, btw, the install command doesn't seem to honor
(though push does)
meant to send you a pull request for that, but figured I'd ask first if that's intentional
hmm, it might be
my case I use .kansorc to point to git repos of packages I own
don't want "kanso install" overwriting them or something
what's your setup like?
on disk in another directory that I wanted to depend on
developing against an unpublished package
right, so for dependency checking, the install command should check the package paths in .kansorc
it should not attempt to write to any other directory than 'packages' or the one specified by --package-dir
probably makes sense, and would work in your scenario too
I'm still wrapping my head around kanso
I like it
very much like the direction you've gone
"build system for couchapps" == awesome
:) ...it took quite a bit of couchapp development to understand what would work
can you explain how this works from a show/list events.once('afterResponse', history_ui.bindHistoryViewer);
does the client side get notified of the event?
that's part of the duality framework, it'll emit the 'afterResponse' event client-side after it's been rendered
implements the design doc api in the browser
it'll run the list/show function client-side
it'll fire that response
your first page hit, the server will render the list/show function, then when it gets to the client duality will kick in and re-render the page and fire the event
that point all the link clicks and form submits go through duality
the server doesn't render anything, just serves up docs and views
is useful when you need to support non-js fallbacks (when search engine indexing is important)
wow, thats a hard one conceptually to get...
I've used it on the wiki app for example
know if I am in the browser or not
a show function
yes, but it's really useful ;)
that's also why I stopped recommending it to new devs
blog uses it too, so does all the kan.so site for the same reason
engine indexing.
all the magic javascript functions like start have a client side version
?
yes
I've re-implemented the view server
is what the original kanso framework was based on
I've re-used some parts of it like the commonjs implementation
ok. thats how the wiki works when you get the weird transistion
you add the modules.js file
client side the second time
interesting
yes, I need to add a loading indicator
when it's slow it looks like its not responding
am just wondering if I want to sip that koolaid. I prefer the singularity model
;)
just hard to mix the two
if you need a search engine to index it, it's a good way to get the best of both worlds
I wouldn't bother
I can defiantly see that, and it's pretty nifty
was a cool idea that doesn't quite work as well as I'd hoped... basically I wanted to write against a single api and have it run in both environments... the tricky bit is in the browser there is a superset of that API and it's just too tempting to write against it ;)
the client-side only events, which mean you have to start thinking in two environments at once
if I go for the single page model, whats the best way to get at my templates on the server side and client side?
the handlebars package to precompile them and append them to the handlebars module
you can do require('handlebars').templates['mytemplate']
it'll work client-side and server-side
that's why we need to make the backend query servers more powerful
you won't have a superset in the browser
anyway. i gotta run.
bbiab
I'm a fan of installing Kanso locally FWIW
just check node_modules right into my project, and I add ./node_modules/.bin to my $PATH and voila. Each project can use a different version of Kanso, as needed
see
enough :)
Is there a package to get the _docs/ behavior from the old couchapp tools? I just want to dump a bunch of .json files into couch
the upload command
cool, can I hook that into my kanso push?
that's definitely good enough to get started
needs updating to use bulk docs
its serviceable for now
it understands environments defined in .kansorc
I'll write a package to do that. What always killed me with the couchapp tools is that you can't write Javascript instead of JSON
you can do "kanso upload data/ dev" ...or whatever
I'm tired of quoting the keys all the time
yeah, it is annoying
maybe use process.env or whatever else doesn't require io. It would be nice
I use a streaming JSON parser and don't want to change it to a streaming JavaScript parser ;)
loading data docs I mean
saw that. Why did you go with a streaming parser?
attachments?
I've generated some fairly large datasets for some projects
testing etc
seemed sensible
yeah
server why u no respond to ping?
\o/
have slowly lost my appreciation for ping. Steve Yegge's essay about Amazon services really crystalized it
to have you back kanbot
you almost had to rename him to kannotbot
do y'all feel about a precompiler that inokes npm install?
that make sense to anyone else?
it's usually run with sudo, so maybe that's a non-starter
I don't need it
you explain a use case?
I've been using the kanso packages to pull code out of a node-based build system for a web front-end to turn it into a couchapp
i've been using kanso to do things like precompile the templates, and --minify instead of the yui-compressor step that was in the build script
think I can get away the way I'm going though... skip the node build script and just make my own kanso build step
guess we know that people using kanso will be using npm, so I see no harm in calling it from a build step...  I guess without the -g option
can be an issue. was for me.
anyway, I think it's not necessary.
ok
do think it might make sense to be able to install kanso packages out of package.json packages
like, I'm about to package a mustache-precompiler, should I include mustache in it, or make a separate mustache package?
separate
which case, the mustache.js package.json seems like an automatic kanso package, it feels silly to make a kanso.json
you here, you have the node/kanso package vision?
like node/commonjs module -> kanso commonjs module is straightforward, no?
me check out the console source for the modules build step
it in kanso-utils
re-run it by Jason, he might have an opinion
me?
yes...tilgovi has some packaging questions..
sticking stuff in package.json instead of kanso.json
the case that a package.json already exists, could we have smooth dependencies that pull it in as a module from npm rather than have to repackage everything for kanso?
by naming the module
in a kanso app, you have a named module in your kanso.json. This named module has a package.json
that the scenario?
yep
that already work somehow?
if I copy the module into my kanso app, and point at its source instead
just don't want the kanso community to have to package commonjs modules and keep them up to date when kanso can just pull from a repo of them that already exists
you want a kanso install to then fetch the name package, and then look for any package.json, and then do an npm install
yeah, I think that's right.
well, depends on what npm install does exactly. I'm not tooo good with that
tht'd probably work though
get you.
may not be necessary to directly call npm
wonder if there are npm internals though
because, for example, we don't want to compile extensions
pure commonjs modules
it should reference git repos instead of npm packages
just want in the local node_modules folder the code to be available to your modules processors
think that Jason and Caolan made the packaging similar,
right
maybe it would be easier to connect direct to the npm repo and download the package
for the record, my "major" work on Kanso was getting it NPM-compatible. I quote "major" because that represents a very small fraction of the Kanso project
npm
OTOH, I basically love Kanso and wish everybody would use it
you mean getting kanso installed as an npm module?
right
right
oh, ok. and not the kanso module format
that's caolanm but of course he took some cues from npm and he has also been receptive to rational argument
think it's a fine thing. not every kanso module is a commonjs module
an npm module
have subsequently played with ender and that is a really interesting technique and (IMO) something to look at regarding Kanso, but unlike Isaac, I am not persuaded that that is the only possible good solution
is ender?
is really fascinating, although since looking into it, I have some doubts about its stewardship (lingering bugs)
is NPM for browser javascript
anyway, the cue I guess I'm trying to steal from npm then is having a repository field in package.json
believe some Twitter engineers maintain it
ohh, I did just see that
clever thing though, is that ender packages are published in NPM. You use npm to search, download, install, and upgrade your packages
node people who try to use an ender package in there app? :)
it has some buildy stuff to bundle those up into minified browser ball
see
In fact, many packages are dual node/ender. For example, the ubiquitous request package. Mikeal has a package for Node, and I have a (planned) 100% API-compatible version for the browser (using XMLHttpRequest instead)
aha
not merge those? When you `npm install request` you get the same package you always used, but you can also do `ender build` or whatever and you get the browser version
is there an easy way to pick out the pure-js modules from npm?
think that is becoming a minor issue in NPM. Maybe there can be momentum in the community to start tagging them as such
modules actually need to be tagged "ender", and when you `ender search`, it applies that filter
that tag implies that you have added an "ender" value in your package.json which tells ender where to hook in to build your code for a browser
dove into Ender in order to get a better understanding of how Kanso should handle attachments. And of course Kanso has *three* Javascript platforms to deal with
stuff is fascinating and strange
the end, Ender was neat but as I said, I am not completely convinced that being an NPM subset is the best solution (to bring the conversation back to package.json and kanso.json)
don't love javascript, but I love cambrian explosions of tools
am working to help Kanso become a cambrian climate
yeah
same
do that
sounds like there will be tasty fish
programmer's opinion about Javascript is identical to a chef's opinion about onions
do not put much thought into the nature of the onion itself
nice. I like the change to bundling in 0.1.3
hated that
dependencies makes me a sad packager
I'm a fan of bundling in Git and not bundling in the published package
that's a tangent I guess
anyway, tilgovi and eckoit, I got disconnected earlier. What was the big problem/
dueling .json files?
yeah
was me lamenting having to package or bundle a pure commonjs module
order to trivially include it in my kanso app
mustache, in this case
don't even need precompilation
Well, not to return to that tangent, and not to sound conceited either, but IIRC that bundling problem was reported by me and I showed how NPM did it as an example of a different implementation. Caolan gave it some thought and agreed
like you're awesome
he's (where is he, anyway? Usually he's here around this time)... anyway, he's open to suggestions and stuff
!beer
know :)
hey
i'm just a busy little kanso explorer these days
yo!
my first thought is, what if the kanso.json stuff was just a "kanso" object inside package.json? Would that help?
(Seems like a very small patch could implement that)
ACTION reads scrollback
of
don't think that's necessary
perhaps desireable
my use case
what's the actual problem? Two files vs. one file sounds like the superficial aspect of the problem
to bundle and/or maintain a copy of upstream + kanso.json
if you want to share one package.json then what about kanso packages named "foo" that are unrelated to npm packages named "foo" and you put them in dependencies?
could ask for kanso.json to go upstream, but it's a pure js commonjs module with a package.json already
can't I ask kanso to get it from git
"upstream"?
this example. mustache.js has a package.json. the entire code is just mustachejs
*mustache.js
it
has a well-known git repo, and a package in npm
ok, yep
I fork mustache.js, add a kanso.json package, maybe ask janl to pull that upstream, and republish it to a kanso repository?
silly
oh
just want janl to take pull requests to the js code and when he tags releases I have the new mustache.js when I kanso install
my personal vision of a well-made *library* is that it supports the various platforms which users want
I would suggest adding a kanso.json and whatever else and sending Jan a pull request
right, but in this case I don't believe there is any more metadata kanso needs in order to be supported
just needs to be taught where to get it
uh, wait
mustache.js is *not* commonjs I don't think
so, worst case, I think what I want it to be able to say
publish git://
is a Rakefile which converts "naked" Javascript into a commonjs file
nah, that's only if you need to wrap it for registration in a framework
YUI3, dojo , etc
I thought about putting a kanso in there, but it doesn't make any sense. mustache.js is all we need.
personally rewrote that Rakefile and there was definitely a commonjs target but that was early in my CouchOne tenure, so 20 months ago-ish
nah. mustache.js is a nice commonjs module
Anyway, we can suppose Mustache.js is primarily developed as  a commonjs module
cool
yeah
think there are still issues
example, commonjs on couch is slightly different I think. In particular, require('./blah') is not the same
we could further suppose that Mustache.js is bug-free WRT commonjs
right, finally caught up ;)
sweet
are issues using npm packages, even for some quite simple cases
guess the next problem is, there might be a lot of files in the package which Kanso doesn't want. (Remember, these go in-line in the ddoc, so a 10MB script can't be allowed in there)
starters, a transformation may need to occur to get a sensible require path
require system is different in node and couchdb
I want to balance three things: 1) having lots of packages for kanso, 2) spending as little effort achieving (1) as possible, 3) discouraging the temptation to issue pull requests for a kanso.json in everyone else's repositories
broader point is, *some* NPM packages might be ready-to-rock Kanso packages today but I don't think it's that many. You always have to do a little work.
yes, I agree
hm
That's a good point
feeling (just a hunch) is that in most cases, it would not just be a kanso.json
that's a sensible claim
might often include various sprucing up
example, tons of NPM modules use the Node standard library
require('util').inspect
yeah
they do console.log()
we have a single namespace to worry about
packages are more like .debs in that respect
may provide a clue here. You *do* have to tag your package as Ender-enabled, even though it's already in NPM
has this awesome ability to manage dependencies for each package separately
we don't
requirements become too strict when using npm packages
OTOH, something holding back the explosion in the future is managing *dependencies* in the .json files
kanso we have to use it more like a blacklist
in the future, tons of *Git* projects will be dual NPM and Kanso packages
tag; npm publish; kanso publish
would be ideal, but making the case for kanso is harder than making the case for npm right now ;)
Mustache hypothetically depended on a hypothetical package "regex"
the right thing to do for now is just to submodule in the upstream git into my kanso app's directory tree
not bother with a kanso package
ideally, Mustache is pushing the same version to NPM and Kanso (and also tagging in Git) and regex must do the same
these 0.0.1 versions kind of worry me
I have tried lots of techniques and I now think there is no case for Git submodules in Node/Kanso/Javascript projects
hmm
I just bundle?
yes, choosing whether to use the upstream version or the package version is an issue, I think we should probably move to an upstream package version plus a kanso version -- like 1.2.3-1, 1.2.3-4
I'm not sure if "bundle" is clearly-defined
that makes sense to me
`npm install` and also `kanso install` are just glorified wget and tar
is a feature!
(IMO) the best workflow is to use your packager to get the correct package you need (based on the *.json metadata)
you have some files. Just check them in.
personal policy is, whenever I do "code generation" (expanded to include dependency installation), I immediately checkin with commit message "Run: $the_command_I_typed"
is interesting also in that the output is always on doc
that's almost like how npm maintains different dependency versions
it's just that they're not linked on the filesystem
they're duplicated in multiple couch _design docs
you were to install multiple kanso apps into the same couch db
personal policy is always to never check in things which the checkout and proper build tools can regenerate.
I think CouchDB really needs the "./node_modules" feature
yes, this is a bit of an issue on the kan.so site because it's actually 3 separate couchapps
"always to never"
you download some of the same code 3 times
can't change in current query servers
forgive me if you know this already, but NPM itself (plus Node's preference for local packages rather than global) is becoming a reason to use Node
i.e. it's not the language or even the async/callback programming. It's that your package situation is so clear and understandable
blah virtualenv
that exciting
is dead simple to use module "foo" and module "bar" and foo and bar depend on dissimilar versions of the "same" package
packages in node are awesome
and bar can even depend on different major versions of the "same" dependency, with incompatible APIs between the versions
just wish it translated to couch and the browser
it's nice and automatic, but it does mean you have to cd back to the top of your tree before you install new dependencies
with a future query server API one could imagine being able to require an attachment from another _design doc
uh, I could be wrong but I think NPM finds ./package.json, then ../package.json, ../../package.json, etc.
it installs accordingly
oh, right
wait...
you have to be _in_ an npm module to install npm modules
right
no
you still wouldn't want to ship 5 versions of a library to the browser though
ah, maybe
you don't do -g
*think* if there is no package.json all the way up to /, then it just installs in .
ah
it's a nice experience, that's for sure.
I know for sure is, if my package.json specifies version foo "v1.2.3", then regardless of subsequent "foo" releases, when I type `npm install foo` I will get what I want
of course I can depend on "1.2.x", or use various other ways to give npm (and Kanso IIRC) some leeway
point is, when I say require('foo') it is really excellent if Node|Couch|Browser attempts to find it *deeper* in the tree, not shallower
is in fact the primary insight of Node and NPM and that is a major reason I use it
the question was "can we use npm packages in kanso projects directly"?
makes a good point
points are secondary to driving adoption
point?
adoption is the most important thing
are quite a few cases where adding kanso.json seems pointless, but we just don't have enough info in package.json for it to work reliably... this is why I have avoided it
think we'd have to think about changing the way the build system and/or couchdb works before we can start using packages from npm
still think "using packages from npm" is not clearly defined
is the "use"? Is it downloading it into my project? Or something deeper?
alternative might be to offer a lightweight kanso package format that wraps an npm package with some basic transformations
then we're still maintaining a file somewhere
don't *think* people would objet to maintaining a file (or maintaining some fields in package.json which NPM ignores)
course, there's nothing stopping you grabbing a package off npm and copying the relevant file directly into your kanso project
worked well for Ender
most cases, you just add "keywords": ["ender"] and "ender":"./ender_entrypoint.js"
that's not bad
with kanso you'd currently have to specify another dependency list
Where, when the browser runs require("blah") they get the exports from ender_entrypoint.js, which presumably itself requires deeper code and exposes it the way a browser wants it
I am optimistic that those dependency lists might merge one day
could go for a "keywords": ["kanso"] and "kanso":"./kanso_build.js"
example, if I started depending on Mustache, its Kanso package and NPM package would effectively ship the same code
s/effectively//
kanso build script, nothing to do
npm install and point moudles at it?
kind of ugly
tilgovi, in the short term, that package.json will list tons of dependencies for NPM packages, not Kanso packages
yeah
in the most simple cases
ender actually uses npm programatically. They require('npm') and go to town
nice
that's what I was thinking
brought this up (or considered bringing it up) earlier but I felt like, hm, maybe it was getting ahead of myself
you are moving from a technical point to a philosophical one: should Kanso packages be a separate repository at all?
frankly have a conflict of interest here because Iris Couch benefits from two repos, because I reduce my chances of not being the official sponsor/host of the repo
IOW, if Kanso packages are subsumed into NPM, and then NPM goes solo (my first blog post was how to go solo from Iris Couch), there is some intangible loss
hm
think we'd essentially be trying to run two packaging systems in a single repository... to be honest I don't think ender should be using npm's repository
think I agree with that
would be more useful in my opinion is tools to make pulling in npm packages really easy
don't know. Maybe that's not such a big deal. Mostly it feels kind of presumptuous to tell somebody their repo has no good reason to exist, so I never mentioned it. I am also not even sure that that statement is true.
+1
we know when they diverge
its just a review step before getting the new one
maybe it even auto-publishes and we flag it if it's broken?
the big thing to remember is that people *working* on the packages have a *git* "package"
Isn't it better to optimize publishing rather than fetching?
there really *that* many NPM packages that are Kanso-ready as-is?
debian/ubuntu packages usually contain the original upstream code plus a patch ...I'd like something like that for kanso, but the original code instead of being bundled might be a git repo or npm package?
I suspect they are few
I agree
the ones that work with ender are probably more likely to work with kanso
the thing from package.json...
"repositories"
is also the Debian (maybe Ubuntu too) concept of a non-maintainer update
So, if the guy maintaining Mustache isn't interested in Kanso, my fork of it could pull in his work and then npm publish. Keep version parity
a repositories section in your kanso.json and we pull those git repositories and evaluate all the paths relative to that
else is really needed
a practical matter, fetching code from NPM is *way* easier than Git
could implement a patch queue series as a build step
preprocessor
like, there is an API call to say please fetch this package and all dependencies, except ones I've already got
whoa
Hm, I'm not sure if "patch queue series" is compatible with a cambrian explosion *shrug*
FWIW, my feeling in the short term is to build and publish more Kanso packages until I better understand Kanso nature
"repositories" : { { "type": "git", "url": "..." }, { "type" : "npm", "name": "..." } }
demonstrates that very little Node code is readily useful on non-Node platforms
So you are thinking about a unified package.json file?
nah, that could be a kanso.json file even
concern
sure that's useful
yeah. maybe we just need to play more.
thanks for chiming in
thanks for kanso :)
it's bikeshedding but I always liked the idea of a "kanso":{...} object in package.json
indicates which top-level data is wrong
like, the author field, the project home page, all of those are useful as-is
just splatter the contents of "kanso" into the package.json top level and go from there
that what you're saying?
well, it would trim down the kanso section a lot though, just removing the dupes
I wouldn't use the word "splatter"
kanso.json has "name", "version", and "description" which would all be de-duped
build stuff in Kanso is way nicer than NPM
fact that "building" is understood as something you might want to do
of building, does anyone want to take on the traditional-couchapp package?
don't use it so I'm probably not the best maintainer for that code
yeah I'd like to take that
Couch has a dozen or so tradional couchapps and it's a pain
awesome
of driving adoption, traditional-couchapp is a pretty nice coup d'etat
yes, I think it needs to exist
I would maintain it anyway
if someone else actually uses it then all the better
want me to add you to the kanso org on github?
perhaps you'd like to manage traditional-couchapp under iriscouch?
Well the key thing is that I could `kanso publish`, correct?
yes, that part is easy enough
suppose you can just manage it on your fork
I'll switch the owner on the repo now
that might be good for now
need to work out a way to let people hand over packages to other maintainers
ideally allow multiple maintainers
So... in the short term, it would be cool if "author", "description", etc. would be checked from package.json if it was missing from kanso.json :)
I pull requst that?
I'm pretty sure NPM supports multiple maintainers now. You might want to check, and maybe even reverse-engineer their validate_doc_update() function
use email addresses for usernames right?
no, just couch usernames
oh
Oh! Also, speaking of coups d'etat (I love pluralizing that), maybe a kanso feature to copy your _users document from NPM to Kanso, so you can have the same password and account data
^ heh
you are now the proud owner of traditional-couchapp
btw, the repository couchapp will break on upgrade to couch 1.2
didn't even realize it existed. It looks heavily developed. Is it missing any features?
nasty magic comments
!json filename
however they work
this -precompilers business has got to stop
oh, and the fix to make the repository work nicely on 1.2 *requires* 1.2 to work
:)
not
Do you think there would be a way to use _rev tokens so that I could grant you a one-time permission to publish a package that I otherwise own?
that's my MO these days... "blah blah blah" "maybe not"
you crazy.
you mean separate packages for precompilers?
yeah
Sorry, I lost the thread. caolanm What is wrong with CouchDB 1.2?
changes to _user db security
that is killing NPM too
the templates example
actually great, but requires some changes to the way I run the kan.so site
is a little bit ham-fisted, IMO but I kept quiet as I have assailed various features and developers of CouchDB too much
nevermind, I gotta put my head down
LOL
Good convo! TTYL
bye
don't worry, I think database security is going to get more overhauled
is just temporary
is why it's in erlang
problem as-is is that lots of couchapps assumed that docs in _users were like your public profile
yeah, I thought about that.
actually
sure, everything Chris A. worked on assumed that. You have gravatar links and nicknames and stuff
yeah, that's the problem with kan.so too
real quick:
to sleep on
should say so in the RFC
won't hate you
Wait... RFC?
proposed that it be configurable
for 1.2
like the new security but it should be optional
was not aware that CouchDB had RFCs
eh
yeah, at least transitionally
ml post with a subject RFC: ...
yes
Ok, I'll search for it and chime in there. From my POV, it just hit the Git branch like a bolt from the blue
ACTION stops keeping tilgovi up
yes. it was deemed security sensitive
we discussed it for a while on security@
Haha!
ACTION rolls eyes
is security sensitive but Couch has been like that since forever
yeah
it was a secret that _users was readable by everyone
exactly
actually like most of it, because it greatly simplifies my inbox db
I rewrite it
I'll try to force in a patch to make it configurable for 1.2
man
I'll make popcorn
also, read security at the doc level pls. kthxbye
actually make sthe code cleaner
yeah
also, btw, you all are going to love me when my JS traceback code drops
really am
you longtime
want the implemention to change, so if I put rev=aaaa password="blah" then it actually stores rev=bbbb password=undefined, password_sha=whatever, and also the rev tree *includes* aaaa
I'm trying not to make too much noise on JIRA/master right now (so I can still have social capital for things like this security business)
i.e. it does a silent little update between the http layer and the disk
that if I replicate back down, I don't get a conflict
get what looked like a normal modification to my doc
sure what you're talking about now, JasonSmith
ok that means I should pare it down and RFC it
I'll push a branch for you if you want to use it while you play
full tracebacks out to the browser that will tell you things like "dust.js" "duality.js"
line numbers
nice, with commonjs module support for show and list functions using those?
yep
AWESOME
now sleep
I'm not sleeping yet!
I'm about to start working more!
shh
only other thing I want before I get it into master is
it's a separate feature
I think perhaps we should be able to silence view query errors, log them to couch.log and just 500
it _is_ possible with vhosts and well-written _shows to have your couch-side query code hidden from users
don't want to suddenly dump all that code out to the browser in traceback. we need a production mod.
sleep already
dude, that's not what I'm trying to do
shh
don't make me kick you from the channel
wait, you're *not* trying to sleep?
no!
it's only 9:40
i'm gonna work a couple hours
ohya, we are in the same timezone
brb
you are still here!
https://github.com/tilgovi/couchdb/tree/jstracebacks
should rebase that onto master or whatever for your own development
me feedback if there's something I missed
should improve js errors significantly
thanks
Is that in 1.2.x?
nope
going to push
think it would be easy to backport to 1.2.x?
I'm hoping that by not making a lot of noise on 1.2.x, which has been branched for _FOREVER_, it'll help get 1.2.0 out faster and 1.2.1 / 1.3
less I do now, the faster 1.2.0 comes out
Iris Couch users might want to use it. I knew it existed but haven't tried it yet
more I have ready to drop on 1.2.x after release and on master the bigger the argument for cutting the next release
I'm trying to put my head in the sand and pretend that couch releases are fast
hopefully they will become so
that was one of the first things I said I wanted to focus on when I got my commit bit
plus, I'm taking a look at configuring the new security stuff
I do think I should push for that
just changed my mind
than making the db security more complex, which will make we want to polish it to a shining hooks system that goes all the way to query servers
I'm going to say the safe and forward-compatible thing to do would be to make a public profiles view of your _users db
i'm not going to touch 1.2.x
am I supposed to call require() inside my show function or inside the "load"'ed module
the top
either
default the properties package does a trick to maintain module scope in your show functions
think there is a setting to turn that off
its useful anyway
usually do my require() calls at the top of the module
oh, the trick is just to require the module then call the show function from there rather than exporting it directly btw
setting to toggle that behaviour is "proxy_functions", set it to false to disable
(I should document this)
last words.
Hey, anybody here?
hey, has one of you used the backbone package of kanso?
you use the less-precompiler?
nevermind. silly problem.
like kanbot better than the one in #couchdb
db module has a dependency on jQuery?
be
make ajax requests?
hello to kanbot everyone
(it doesn't do anything other than log to a private couch db atm)
kanbot
kanso fetch kind of slow or just me?
and goes
yeah, its does seem a little slow sometimes
idea what might cause this? http://cl.ly/1n1h0L28403S3Y1S0O0t
i took what kanso create gave me and then added duality-contrib-session-hb and dependencies
sure if using null in the dependency values in kanso.json the most stable choice, it might be better to require "0.0.0" or higher?
think I've seen that before, but I can't remember what caused it
have the spine adapter working reliably.
ACTION beams
great!
i'm telling all of you, because you're the only ones who would appreciate it. :)
well, once this new version is finally out hopefully some spine devs will be interested too
tried to share the news in #spine.
must be asleep
:)
do you have a minute? i'm trying to minimize the stack of script tags my spine adapter currently depends on. this must be a job for commonjs, but i can't figure it out...
"remove_from_attachments": true is an option in kanso.json that i'm not very familiar with but might do what you want
i'll take a look
saw it in https://github.com/kanso/create_account
think that's specific to the less compiler.
probably
sorry
problem
i'm guessing too. :)
sense
only know the less compiler because i based the coffeescript compiler on it
:P
question: how do i use update handlers from a dependency?
hi
you're currently including the spine .js files manually?
if you use them as modules, you can just include module.js
then require('spine/core') etc
about that
i'm trying to pack up my spine adapter to share. it uses update handlers. will this work?
yes
good
sure you give your update handlers a name that won't clash
them with something like "spine_"
"lib/updates" is a poor choice
:)
right
ACTION changes the name
ok
want to modules to be namespaced too
spine/update.js
ok
spine_adapter/updates.js
like that
ok
goes for views, etc. i assume
sucks, but all packages share a namespace
bit like a .deb or .rpm I suppose
https://github.com/nrw/spine-adapter/blob/master/kanso.json
i need  more dependencies to make this work?
rather, am i missing any modules that are essential?
would rename the lib directory to 'spine-adapter'
will
update kanso.json's load property to 'spine-adapter/app'
sensible to me
using your coffeescript precompiler?
didn't want to add another dep
i not care about adding dependencies?
well, it will make the build time longer since it'll compile on push
it won't bloat the app
the coffeescript compiler doesn't add anything to the design doc
yes.
is great
:)
:)
i have you here. one more question: i'm drowning in script tags
https://github.com/nrw/kanso-spine-tasks/blob/master/templates/base.html
has one less than it needs to work
way i have it running.
34 and down is what's relevant
are you adding a spine.js attachment?
have the spine module available
it didn't work when i tried it the other way. :P
require('spine/core')
have to do that after loading modules.js
was getting an error.
ah
might be the one
again, and let me know what the error is
ok
there's no reason to load spine.js twice
thought that might be the case
ACTION tries it
think I might create a views package for loading views
you can export them from app.js
they're kind of a special case
they don't have module scope
http://cl.ly/413Y0J1G2G1H1N342L31
can't require() at the top of the file then use that module in a view
i doing that?
only have one view...
no, I haven't looked
oh
I'm just saying its a general issue
we're just chatting about views
:_
:)
:)
want to make them more idiot-proof
I'm thinking a views directory
ah, yes
a json-like file:
{
do like the simplicity of the file structure, right now
beats the hell out of the python couchapp tool
well, the current style would still work
I'm just going to add another option and recommend it in the docs
i'll stop prematurely complaining. :)
extend spine
well, its still a valid concern
the root of a module
want it to seem simple to use
think that's my error
do you need jquery or anything to do the extend?
ooh
copied this code from the spine source
i've only changed about 30 lines
i couldn't get it to work by just overriding built in methods
ok, I'll try building the app
you'll need to grab both projects
https://github.com/nrw/kanso-spine-tasks
https://github.com/nrw/spine-adapter
oh
spine
https://github.com/nrw/spine
ack
i'm not sure if the one that i pushed is broken
:P
checking
missing spine-adapter
ah, you copied a git repository
yes
treating it like a submodule, but there's no entry in .gitmodule
know
add it as a git submodule
ACTION hangs head in shame
remove the .git files
i make that project one module for you?
can check out spine-adapter manually for now I guess
just need to check out adapter and spine (my repo) into /packages
uhm
just worked
good?
code?
um
no?
don't think so
yes, it still has the spine.js script tag
I'll remove that
just commented that out...
https://github.com/nrw/kanso-spine-tasks/blob/master/templates/base.html#L33
commits might not have gone through before you cloned
anyway
you seeing a similar error?
yes, just taking a look
wait, does require('spine/couch-ajax') affect the global scope?
yes
mistake?
well, it edits the Spine object, for sure.
but, i don't think that counts as global...
looking
coffee-script getting all up in my javascript
:P
;)
can just read the javascript parts :)
ok, so require('spine.core') returns the Spine object
yes
oh, you're coffeescript precompiler just tried to compile .index.coffee.swp
I'd recommend it doesn't match hidden files
!
checks for /\.coffee$/
make sure its not a .swp file
ahh
:)
i'll fix that right now
i given you a terrible mess to sort out?
well, I'm working in coffeescript with a framework I've never used... so taking me a while to parse ;)
what is Spine.$
?
copy of jquery
why?
much of jquery
don't know
:)
could be mistaken… but i'm fairly sure...
i'll look it up
doesn't look like jquery to me
I think that's where your problem is
https://github.com/maccman/spine/blob/master/src/spine.coffee#L455
https://github.com/maccman/spine/blob/master/src/spine.coffee#L489
think that's our answer.
right, and in your app its the last option
(element) -> element
i require jquery?
couch-ajax?
its doing @jQuery instead of window.jQuery
when its run as a module this.jQuery is undefined
the module is not run in the browser window scope
ohhh
hm
i'm learning. :)
require("jquery") an option?
yep, changing that line fixes the app
require('jquery') is not an option
you don't need to
is the solution?
@jQuery on that line with window.jQuery
you'd want to do the same for zepto etc
that possibly break anything else?
don't see how
this.jQuery seems just wrong to me
checking
:)
that and your app should work
is require('jquery') a bad idea? or just not an option at all?
is not commonjs?
right
i'm learning
is this.jquery a bad idea?
"just wrong"
?
its using that to access the global scope, assuming its window
in a commonjs module its not window
the module's scope
that's the whole idea of modules :)
:)
it needs that change to fix its commonjs support
i'll submit a bug report to spine
yep
the meantime, hack it onto your spine package ;)
you, once again.
really appreciate these little lessons. :)
np
price is a wiki page btw
:D
on it
ACTION will do odd jobs and debugging for documentation
heh
just committed my pull request
was quick :)
know!
they're all gone until you submit code...
these two be quick explanations?
	•	Custom repositories
	•	Using development packages
i'd like to do both of those things
:D
repositories I might not do just yet
i'll write the wiki articles...
it could really use the repository app being updated first
ok
development packages is a quick one though
me!
:p
you used a .kansorc file yet?
no
guess i can write that article too...
ok, well .kansorc can include some config like databases to push to etc
would be nice
use
just a js module
you have a sample file so i can see the syntax?
anything you export is used by kanso
I'll just put one together for you with some comments
sweet
https://gist.github.com/4eedb8bfef75b1aeecb0
beautiful
this just live at the root of the project?
yes
excellent
I think using development packages might just be a section in the .kansorc page?
link to a heading within it?
yes
great
.kansorc a new thing?
fairly, been around for a couple of weeks at least
undocumented like everything else ;)
is going to fix that though :p
:)
i'm working on it!
note: how do i namespace my views and updates? do i need to move them to another folder?
rename the files?
just rename the view/update function
...
 // views.js
exports.myview = ...
the function?
exports.spine_myview = ...
this isn't a "it won't work" issue. it's a "don't pollute" issue
yes
have yet to make it work
:P
be aware there is a single namespace for views, update functions, shows, etc
them appropriately in packages others will include
will be polite and not pollute!
:)
now my rewrites are at "/:modelname"
that's polluting
right?
that be "/spine-adapter/:modelname"?
be nicer
it's an easy fix
what spine developers expect i suppose
expect it at the root
maybe you should just do it at the root
they expect their api to be a separate server…
see
hmm
could just make it a variable...
to "spine-adapter"
make it easy to nullify
yeah,  you could make it an option in kanso.json
oooo
points for making it definitively a kanso tool :)
you'd have to add a build step for it
it'll be quick to extend spine for now
… i think. :P
postprocessors which copies doc['spine-adapter'] to whatever they set it to
was just gonna namespace the rewrites
yes, sorry
we could tie it all together, just for fun :D
ignore me ;)
the simplest thing
views have to be in the "lib" folder?
their package?
no
i'm not sure what i'm missing.
just have to be exported from the module you "load"
kanso.json
the properties package
I should change "load" to "properties"
make it more inline with "modules", "attachments" etc
didn't include properties as a dep
that'll be it
properties as a dep and add "load": "path/to/app"
exported from that module is added to the design doc
included
http://cl.ly/3r2h1U1Z0l121L1x2U3x
that's strange
does your kanso.json look like?
http://pastie.org/2952234
paths are correct
hmm
it my fault, again.
:P
an odd error
entering a recursive loop somewhere
sure what could be causing it
looks like this
module.exports =
require('./views')
require('./updates')
require('./rewrites')
some console.log's in the properties load build step and see if you can work out what's going on
is the most coffeescript i've every applied to a project. could that be inflating the stack?
ok
logging
seems to be running normally...
didn't log everything, but i logged many
i'll have to pick up on this later, i have to run
you soon
ACTION cheers
anyone else encountered this properties/load error? http://cl.ly/3r2h1U1Z0l121L1x2U3x
still on that :(
?
it's totally derailed my development :(
annoying when that happens
I'll take another look in a few minutes
pressure… i'm just frustrated
made gave the project proper submodules: https://github.com/nrw/kanso-spine-tasks
good
i may have found a bug in handlebars where there's a call to possible.test() server-side. but spidermonkey does not have a <regex>.test().  possible is a regex.
733 in handlebars/handlebars.js
around there
731
nice find
in couchdb has some strange behaviour with regular expressions
think it depends on the build too, so on some systems I think it works
can you make a ticket on http://github.com/kanso/handlebars and preferably link it to an upstream ticket?
sure
possible.exec() would probably work as well as test(), it too returns a truthy value on match and falsy on no match
thanks
possible.exec is not a function ;(
just check for .test
possible.exec is not a function either?
regular expressions work at all on your couchdb?
i'm not sure
appears not
want to put this to #couchdb first then
at least defining one like   var possible = /[&<>"'`]/;
just get {}
var re = new RegExp('test')
RegExp('test').exec('testfoo')
like that
vaguely remember having an issue with regexp literals before on couchdb
both are {}
possible = /[&<>"'`]/;
  log(['possible',possible]);
re = new RegExp('test');
  log(['re',re]);
show fails with possible.test not a function and in the log i get mustache love
to figure out how you got handlebars working in kanso_home, i think you must have coded it in such a way to only load handlebars browser-side.
let me try pushing to iriscouch
it works on iriscouch
works server-side for me
yeah, and its working on iriscouch
my couch is busted
think this is one of those strange builds
you compile it yourself?
not couchbase or anything?
single server
http://mandric.iriscouch.com/demos/_design/demos/_rewrite/
I'm guessing thats a binary?
doh
if they know its broken
2.0.0-dev4
can ask
do you deliberatly have "default" in quotes and "production" without quotes in this gist? https://gist.github.com/4eedb8bfef75b1aeecb0
deliberately have 'default' in quotes because its reserved
could put 'production' in quotes too if you want to tidy it up
you don't need ot
*to
ok
:)
an irc bot announce changes to a couch database is *so* easy
woot
ACTION hugs changes feed
beats a quiet channel
cool
if i remove "load": … from kanso.json at the root project or in spine-adapter, the push succeeds
caolanm*
there an issue with two modules setting "load", perhaps? or the timing?
shouldn't be a problem with that
I've done it before
just can't figure out why it would work with one or the other, but not both.
looking into it now
you have a circular rewrite somewhere
shit
know where that is
hm
i don't
yeah, I'm not sure either
says this:
that's my require statement...
yes, which would make sense
module.exports = [
"/static/*"
  # static
"static/*"
  require('spine-adapter/rewrites')
,
, # show root
"/"
"_show/root"
, # catchall
"*"
the thing its requiring shouldn't be a problem
"_show/not_found"
 ]
that not the way to do it?
looks right to me
i change it to just this
module.exports = [
]
  require('spine-adapter/rewrites')
still fails
… not sure if that tells us anything...
have a hunch somethings not giving a conflict when it should be
assume you've looked at all the rewrites...
https://github.com/nrw/spine-adapter/blob/master/spine-adapter/rewrites.coffee
methods point to one update...
yeah, comment out the require('./rewrites') line in spine-adapter/app.coffee
it'll build
you've got multiple packages exporting rewrites
that should conflict
so, i don't want to *export* rewrites twice
see
for some reason its not
oh
doesn't work
:P
no, just export rewrites from your root app
doesn't work?
it's building for me
...talking to myself
ok, that gets you coding again at least
you
I need to work out why it didn't fail in the way I would expect ;)
indeed.
you have any objections to having a brew script for kanso?
no, just so long as I don't have to maintain it
i'll do it
brew script is like a package?
yes
mac
a bit like arch packages
grabs the source from original location?
stores on a repo?
from location
yeah, sounds a bit like arch :)
it's an automated make file
question:
ok, feel free to make a brew thingy
do i handle versioning from the github dev branch?
of kanso?
guess it would be whatever version is in package.json plus some hash id for the current git commit
like 0.1.0-git-e06974ea79d27d7d686320e856b3ad9bf5835355
convention for homebrew scripts is to have packages with named versions, primarily.
ack. i'll just make it up.
:)
think the question i was almost asking was "does kanso have a version numbering scheme"
that's what i want to know
sure, something like semver
release will be 0.1.0
excellent
you
ACTION gets back to work
think it's pretty common to use something like 0.1.0-git-e06974ea79 for a dev build
tmrw… see ya
I've managed to catch the error properly
it gives a better message
Error when running postprocessor: "properties/load"
Conflicting property values for "rewrites" caused by the "tasks" package
properties package cannot merge arrays exported from modules. This usually occurs due to exporting rewrites from multiple packages.
time for some sleep, planning to get some snowboarding in tomorrow
laters
were you and caolan discussing a handlebars bug yesterday? something with possible.test()?
… i get that error with handlebars, but i'm not sure if i imagined you two talking about it. :P
yep
was a couchbase build bug
hm
you using couchbase single server?
installed from homebrew
i'll check what that uses
probably couchdb sources
yes
apache.org
so that's weird, it might be different then.
suppose i'll open an issue...
if you can parse a regex
foo = /bar/; log(['foo',foo]);
i testing to see if handlebars is broken?
couchdb?
testing if couchdb supports regex
ok
ACTION tests
push to iriscouch and see if you get the same bug
:: ["foo",{}]
interesting, so regex parsing seems broken on your couchdb build then.
should that display?
regex object
realize i don't regex much in javascript
/foo/
it does in your browser
so, the browser says /foo/
log says
i pasted
:P
one sec
i'll push to iris and see
swear i'm … where did mandric go?
*sigh*
heh, just left
thought you were snowboarding?
decided to go this afternoon instead
and i were chatting about that possible.test() issue
have yet to have handlebars work with kanso
i'm seeing that error...
a very similar one
i think mandric had an idea. :P
are you using couchbase?
nope
from apache.org via homebrew
so regular expressions are broken for you too?
ask in #couchdb?
shall
me make sure i know they're broken
did you get anywhere with regular expressions on couch?
really
i'm confused now
the club :)
created temp views on both iriscouch and my local couch (couchbase single server)
re2 = new RegExp('test');
doh
function(doc) {
re1 = /test/;
re2 = new RegExp('test');
  emit([re1, re2, null], doc);
}
a temp view like that all i get is love making mustaches
both iriscouch and couchbase
should test a show
this a feature instead of a bug?
well, you're not emitting a json key ;)
that's how it comes out in my shows
is there a better test i can run?
execute those regular expressions on something?
trying
function(doc) {
re1 = /test/;
re2 = new RegExp('test');
ret1 = re1.test('test');
ret2 = re2.test('foo');
  emit([ret1, ret2, null], doc);
}
function(doc) { var re = /test/; emit(re.exec('testing')[0], null);
}
^ that works for me
TypeError("re.exec is not a function", "")
seems to work on iriscouch
if they're using a different mozjs version
yea there's something about my couchbase single server 1.2  and regexes
emailed the ML last night
how's our 1.1 build?
me try that
think there are a lot of couchdb installs out there with broken spidermonkey installs
works
it seems some people have been able to work around it by changing the syntax a bit
String.match(regex)
example
hm. our 1.1 uses some old rc, too
totally expected it to be busted
"To my surprise (and shock/horror), the version of Spidermonkey that is used by CouchDB (and Couchbase Single, and Cloudant) does not treat regular expression literals properly — they work fine as arguments, e.g. string.match(/foo/), but e.g. /foo/.exec("string") fails.  Using the RegExp() function with a string argument *does* work."
oops.
dang
like we'd be doing a lot of people a favor if we ported it to a recent js
can we distribute your mac build of 1.1 somehow?
like i've seen a couple of patches floating sround
could -- for mac os x or linux.
it's probably a different story on win32.
i've been trying to find a good way to package it on Mac OS X (i.e. in to an app bundle)
about this homebrew stuff? would that work?
ACTION knows nothing about osx
think nrw had the same problem with brew
build works now on linux/osx, it's just tied to a fixed $prefix
err, the brew sources...?
i'm updating with brew right now
is a package manager
right
was wondering if we could make a brew package that installs browndav's build
i've been avoiding it
oh
started working on a brew script for kanso yesterday. it's not that scary
:)
just don't like the idea of having a whole new slew of libraries and binaries on my system
meh
are you currently using homebrew
?
switching between the two
i'm not
it's pretty minimal
doesn't duplicate packages it doesn't have to
(unlike macports)
(and fink)
it is; i built some extra stuff in mine
just don't think it's a good end user solution
think the first thing to do would be to make sure theres a test for this in the couchdb test suite
can't tell bob in nebraska who wants to run my app to use brew for example
when people verify an install they'll see a failure on regular expressions
nebraska, actually, banned brew
that's why if you're wondering
be
;)
really
don't have internet there
they're civilized
i'm updating couchdb via homebrew right now. we'll see if the current package has this same bug.
yea i was going to try to run the couch tests on couchbase server and see if any fail
i'd get a test in and pester couchbase/iriscouch
the test case i'm using is  function(doc) {var re = /test/; emit(re.exec('testing')[0], null);}
a temp view
creating a doc
show function might be easier
you actually write a couchdb test I mean
ok
need to create docs
(other than the design doc)
like no couchdb in fink, fwiw
(at least on 10.7)
we whip up a quick test case?
got a reply on the ML
yeah, we can do a test case. i don't see why not.
what did the ML say?
some reason I don't see your post
wait, was this couchdb-user or couchdb-dev?
posted to mobile-couchbase
some dumb reason
ohh
heh
in my history i guess
wanted to notify the couchbase people
http://groups.google.com/group/mobile-couchbase/browse_frm/thread/86b01f6dd34eb7d8
looks like i just wrote a wiki article for a "section". hopefully that text is still useful...
definitely
I'm not really sure how I'm structuring those sections/articles yet
oh, that's right. you're guessing too.
:)
yeah, just hoping to get some content in there first
I'll try to give it a bit more structure
here's a couchdb test that fails on couchbase  https://gist.github.com/1424480
can stick it in http://127.0.0.1:5984/_utils/custom_test.html
writing a test was easy
http://groups.google.com/group/couchbase/browse_frm/thread/6501b408b9cd71b1
sure if i need to make that async
would it be really complicated and annoying to move the caching in db.js to another layer somewhere?
no, not at all.
to improve the db.js api a bit
really belongs in another layer
i.e. a generic object cache
yes, that would be quite cool actually
iirc, i stuck it in there intending to move it later
think i was burnt out on the widget rewrite and never really got back there
it was a pretty big job
:)
(oh, fwiw: six REs and I think I have the base for a documentation processor)
:)
from scratch?
to be able to pair comments with the functions that follow
yeah, basically
fun that way ;)
started playing around, and didn't stop in time.
its good I might use it for documenting some kanso packages
think api documentation belongs with the package
ok, I'm going to strip out caching from the db module... before upgrading you might want to look at creating a new layer for it
I'll leave the existing version up for us to use until then (of course)
oh, you're not going to refactor it?
ought to be pretty simple to move
think the api needs some tidying up
okay, makes sense
might be scope to refactor the code while I'm doing that
it's probably pretty easy to fit it back in
you've cleaned up the db layer
yes, hopefully so :)
should probably just do something like call_cached(_method, _args, _make_key_fn)
_make_key_fn is function (_args) { return JSON.stringify(_args); } by default
add cached versions of the db.js apis
that'd be a little less tightly-coupled
may actually be something like that for node already
nrw, how's it going?
that spine adapter working in the end?
yes
https://github.com/nrw/kanso-spine-todos
i'm having a hard time making it play nice with duality, though. :)
ah, you probably want to remove duality
use spine on its own
i'm using all of the auth stuff from duality
spine lacks that
curses
:P
I've just added you to the organisation on github, you should be able to label + close issues on kanso repositories now
yay!
up in the world
:)
heh
you don't mind the extra noise on your github feed
feed is pretty quiet. :)
there's the 'session' module for auth
oh
not tied to duality
well
duality, then. :)
:)
started looking at sammy, too
think i just like making tools play nice together
yeah! port that too! ;)
are *so much easier* to build with kanso
seems like a crime to omit frameworks
then exclude all of those couchapp developers
:D
just want more packages than me
:D
too
I've just moved the main kanso repo from my github account to the kanso org
i'm gaining on you
step
http://github.com/kanso/kanso
I've forked it back to my account though
links won't break etc
ah, yes. those damn links
from now on, that's the official location
cool
so, i've tried to switch to handlebars from dust about 8 times...
i have yet to successfully switch
now, i'm landing on the possible.test() bug
that bug present on iriscouch?
want to figure out if it's my couchdb install, or something with the handlebars package setup
your install
works on my install and on iriscouch
seems a bunch of couchdb installs have a broken spidermonkey
so, if i push to iris, that should work?
do
if it doesn't work on iris… i'll open an issue.
:)
I'm using handlebars for all of the kan.so site
is annoying though, because it seems quite a few installs are broken :(
somehow must have avoided it
think I'm going to bump the 'top submitters' on the packages page to the top and add gravatars ;)
...I just like pictures
likes pictures!
need a few more names on that list.
:P
yes, perhaps I can persuade browndav to upload some of his ui modules
i'm comparing duality to backbone and spine
and spine refer to MVC and routing frequently
...in a wiki page? :)
that's where i'm going with it
nice
need to understand it better, though
does models via couchtypes, yes?
basically, the core idea of duality was to implement the couchdb design doc api in the browser
yes, couchtypes is standalone though
(or should be)
can be used with spine or whatever
duality store any model data in memory?
duality just reads the design doc like couchdb would. when you click a link it looks up the rewrites and then renders the show/list/update function in the browser instead of server-side
no
ok
will automatically fetch the doc or view for a rewrite
pass it to a show/list/update function
it's more of a CouchDB-V-C architecture
handle the returned value
:)
I'm not really sure how you'd classify it in terms of architecture
handles url routing, basically
you familiar with the MVC pattern?
I guess the controller part
yes, though it seems to have wide interpretations
ah. indeed it does
leave the data management to couchdb.
than that… it's very similar to backbone and spine
hm
view of this will evolve as i learn more
:P
down your understanding of it, and I'll review and let you know if you're off ;)
I think you get the idea
think creating packages for sammy should be quick
it do model stuff?
seem to remember it just being routing
don't think it does models
and events are what it boasts about
doesn't look like it works with commonjs though
guess you just use it as an attachment
has improved my quality of life
javascript tools that lack commonjs support
shit
you're totally right
is my couch install
do i fix it?
uh-huh
is what you guys were talking about yesterday!
ack!
:)
i have any options?
don't know what the solution is I'm afraid
crap
mandric if he figured it out
ask in #couchdb
guess you might try compiling it yourself
grrr
it's broken from source too.
*sigh*
to linux?
:D
:P
tbh, enough couch devs must be on mac to have this working
bet you'll get some response on the couch mailinglist or irc channel
joined #couchdb
um
do i call this bug
?
regex parsing bug?
expressions are not working in spidermonkey
halp!
:D
i've never seen #couchdb with fewer than 150 users.
it's handy when you're stuck
that last remark.
far, no help.
can't find mandric's posts on this issue. he started in mobile-couchbase… but the thread ends, and directs to an obfuscated google group name
you know where he posted?
hmm
no
that's better
?
kan.so/packages was broken between those two commits
ah, yes :)
I fixed custom text for wiki links btw
it's about time
:P
can now do [custom text][[page_id]]
heh
that an easy chage?
yeah
really
in-page anchors work too
page_id#heading
cool
i have a use for a wiki page, i know what app i'll be using
how's the spine work coming along?
oh, you got the example app working right?
yes
to try that out
adapter works well, the way it works...
heh, cool
i'm trying to build a bigger app with it
i'm finding some design issues
wants to get "all" off the items at the other end of an api call
time
if you just need one
idea is to make everything possible client side
i'll need to make my view rewrites a bit more sophisticated
I guess spine is designed for pretty small-scale stuff?
so, for example, i can have different users have different todo lists
right, that sounds fairly fundamental ;)
i'd say it's designed to do big things, but it just wants another tool to filter the database for it
i think i can do easily for the per-user, problem
i'm still figuring it out. :P
insist on doing the work client side!
restructured the wiki front page too btw
think everything that's not a link on there now should be by the time I launch
at least, nearly all of them
sweet
need pictures
:0
:)
yes, but that'll be post-release
other major thing I need to do is write a release announcement
to put my marketing hat on for a bit... I hate that bloody hat
only you could wear the "genuine merit" hat all the time...
heh, yes
cares about merit though, people like shiny things with buzzwords
boo
like merit
that's why its only us two talking in here ;)
:D
see we're only talking about duality and spine now. :)
should get to a few articles later tonight
great
looks like you've make a good start on the wiki :D
i made a lot of homework for you…
heh
yeah, just looking through now
i'd get halfway through some articles and realize i had no idea what i was talking about
:P
haha, that's ok
spine does handle fetching specific docs. it's just really poorly documented.
:)
i'm feeling much better about spine, now. :D
that's good
added support for displaying READMEs for packages this morning btw
have to update your kanso install and re-publish a package with a README (or README.md for markdown)
i'll add readmes
great
(we'll get there in the end)
:P
http://kan.so/packages/details/session
see how slick the readmes look
am i supposed to be noticing?
is all ;)
can use wiki-style markup for code blocks if you wany syntax highlighting
sweet
sparked the jump to 0.1.0?
incompatible change
I think the api will be pretty stable now
tweaking the README, which means re-publishing a lot atm
ok, last time ;)
wasn't really sure where best to ask this but thought someone here might know since kanso (at least used to) relies on dust template. Anything being done to pick up dustjs project? Looks like it's dead.
looks pretty dead to me too
we've added support for handlebars to the new release
I'm using that for any new projects
that's cool. i'm still a pretty big fan of dust though
support is still there, but I probably won't recommend it any more
that's understandable. thanks for the info.
updated the site with installation instructions on the tools page, feedback welcome (browndav, mandric, nrw)
i'll check it out  a bit later. awesome
just click around the site a bit and see if anything obviously breaks ;)
ok
free to queue up a couple things for me, i'll get to them a bit later
i had time to maintain dust
(i used it for a documentation tool, and it seems to work great.
(except for the slightly less-than-helpful parser error messages)
better error messages would be nice
much everything says something like "whyfore with left bracket?"
anyone has ideas for drafting a release announcement send me an email with your marketing skills, this would be aimed at current couchapp devs
I'll just muddle through
:)
the wiki site, or to be posted on the list?
lists. I think it will be posted on couchapp and the kanso one
ok, makes sense. (i forked the node.js wrapper of hljs, fwiw -- needed to provide a way to specify a particular language when it's not running in the DOM)
I'm drafting a release message for kanso
if you have any ideas let me know
do you have a draft for that release message?
http://kan.so/tools looks good. I wouldn't change that.
we end up with common questions about installing tools, we may want to answer them on the tools page, but we'll have to see where people get stuck.
hey
was afk for a bit
I'll paste the release announcement draft somewhere
was too.
i'm excited to read that one
duality page?
sir
:)
tried to write it, and realized i didn't know what duality did
:P
many people do
haha
what you just wrote… i know i'll be using spine for a few "account" pages that shouldn't be search engine indexed anyway, and duality for everything else. :)
core idea is pretty interesting
few rough edges but I've used it for quite a few projects now
exciting!
haha
yes
:)
ACTION hovers of the post button
*over
it!
...good job someone checked my typos ;)
:D
are you posting?
posted to the CouchApp and Kanso mailing lists
we do hackernews and lamernews?
perhaps you should ;)
suppose that question was intended to be: 'is the goal to drum up as much interest as possible?'
...yes
:)
which case, i'll post it about.
great, thanks! ...hopefully in 10 mins the UK will arrive at work too
there might be some feedback by the time I get up tomorrow morning
:)
mitchell`off
howdy
0.1.0 eh? looks good!
aw, you're speaking canadian to me ...eh?
we've been desperately trying to document things for the last couple of weeks
still a few gaps
still a few gaps
:)
shh
:D
started to use kanso for a project a while back then decided Pyramid was a better fit. Definitely need to give it another go though
this release there's a lot more flexibility to combine the tools you like
cool
used pyramid.. link?
http://docs.pylonsproject.org/en/latest/docs/pyramid.html
http://github.com/Pylons/pyramid
looks strange to me now
aww. I feel sorry for you.
:P
the cool kids are doing JS now
how's the JS work coming?
good gigs?
just do Kanso projects now :)
nice
that's amazing that you get paid to work on what was your pet project
ACTION sheds a tiny tear
mitchell`off: I'll be in the UK between the 22nd Dec and the 4th Jan if you're going to be anywhere near York
exactly close now you've moved though
ah, yes. manouche warned^W told me. I'll be around :)
har-har
good, manouche is doing his duty
to feel like I should sleep now
here
#haru on OFTC before you fall asleep and forget heeh
home for ex-isotomans
sec, I'll add it to my auto-joins
\o/
I've gotta head to work.
you later :)
later
ok, sleep
night
oh! /topic
caolanm
are an earth shaker
that good?
saw the announcement… so great
feels like you did it overnight
i'm blown away…. anyway i hope to contribute more in the future
too!
thanks :)
you too :)
:)
the whole coffee-script/spine thing is major too
should really thank you
me? i just write broken code that caolan fixes.
-- more tmrw
all
do you think we should point to the couchbase single server binaries on this page? http://kan.so/tools
like the easiest way to install couchdb
hm
maybe after they fix that regex bug heh
that's what i was thinking about.
can't find an install that doesn't have broken regexs
a way to install
even brew?
brew is broken
that's the install i prefer
we do couchbase single server links, we should do "quick install" instructions for node too
i mean i'd like people who have no experience with couchdb to kind of just get the hello world working
like a good idea
bad the tools page isn't a wiki
:)
was thinking to recommend this link http://www.couchbase.com/downloads/couchbase-single-server/community
yes, that's the link to share
1.2 single server
yes
i guess by linking to couchdb it does put some pressure on them to build some binaries.
anyway
it's not easier
still pretty close
it's been a long day
ttyl
are the replies rolling in yet?
seen responses on the mailinglists, positive so far ;)
had 2(!) strangers in the channel earlier
missed the ruckus
:)
haha
is there a hook for extending kanso create?
i'd really like to do something like `kanso create appname —coffeescript`
I'd like to support that
really sure what to do with kanso create atm
bundle a few template projects for different frameworks etc
let others extend it somehow
...that's why I haven't really mentioned it in the docs
it be done like other packages?
that's tricky because you don't have the context of a project to use
there's no kanso.json before creating a project
ah
how do you include packages?
:)
was picturing something involving the kanso cache...
hmm
have about 4 project templates that i want to more easily reuse...s
curse
:P
can make use of .kansorc
you can put one of those in your home directory
there a ~/.kansorc?
yes
:)
hit that question from both sides. :P
I'm just not sure how to implement it yet
bundle a couple of templates, then let people define more in ~/.kansorc
like dev_packages
mean `package_paths`
don't know if that's an urgent priority… i just needed to check if that functionality already existed. :)
you're welcome to implement something along those lines ;)
would be a helluva learning experience
"meet the command line tool"
:)
lib/commands/ ?
might as well just use the package machinery.
that's confusing
i think that's a good point, since kanso is at its core a command line tool...
support extension of that.
yeah, extensions to the tool itself are an interesting point
mean, adding commands etc
django they did that fairly well iirc
might even be better to keep the core commands well defined and let everyone else create their own scripts that call kanso commands... not sure yet
we were using the django model, we'd let packages include some sort of module that contains command extentions
far of a leap is that from the current kanso command line tool?
they only work within a project?
(the django commands)
yes
oh
:p
I'll look into the django handles this, sounds interesting
works well, but it doesn't allow (afaik) project generating like we've been discussing.
right, for the reason we've already discussed ;)
of these days, i'm bound to have a good idea...
here's django gist https://docs.djangoproject.com/en/dev/howto/custom-management-commands/
we thought about porting over the blog tutorial?  or is there a plan for migration of old docs? I kind of agree with Clarke that after hello world, it's hard to continue...
?
was talk of porting old docs
yes, I think porting the old docs would be a good idea
perhaps broken up into Duality and CouchTypes
two parts
Hi, I am really impressed by the progress of Kanso!
you point me to the file in the Kanso source where the browser side CommonJS implementation lies?
I think this is what you're looking for https://github.com/kanso/duality/blob/master/duality/core.js
I try to find the source of the require function. The file you mention already depends on require.
i'm pretty sure the commonjs implementation is built in to couchdb: http://wiki.apache.org/couchdb/CommonJS_Modules
it is, I am looking for the browser side ;)
do you have an articulate answer to this question?
you probably know the answer, too.
your modules common js handled by the modules module. ;)
i was suspicious of modules, as it's the one that every other package depends on.
https://github.com/kanso/modules
strangely enough makes sense.
it does
yes! https://github.com/kanso/modules/blob/master/build/bootstrap.js is my file!
you very much
i could help
i could get mandric for you
:)
all around. woot.
team #kansojs
...I didn't have to lift a finger :)
implementation
any reason you're interested in the require implementation?
it's pretty short :)
yea, I love short code ;)
am developing CouchApps the 'hard' way with a tiny little tool which I call Mouch (github.com/jo/mouch) and I am taken with the idea of using CommonJS modules to share code between the couch and the browser.
yes, I saw mouch
does quiet nothing - it only evaluates some ruby erb templates to build the json files
I will switch over to Kanso
think you'll find you can get a pretty minimal build style working with kanso
you decide to switch...
yea, thats what attracs me
will evaluate
I replicate the docs from the website for offline use? I would love to combine them and read it on my kindle
mean http://kan.so/docs ?
yes
http://kan.so/docs/_db
cool. Thanks!
like the idea of having those on a kindle :)
do you package something like that for reading on kindle?
it needs is simple one page html
am new to that kindle stuff but already have the underscore and backbone docs on that device
downloadable one page html docs would be useful for others, too
should this work? http://kan.so/docs/_db?include_docs=true
 /all_docs … oh wait
404
 :)
right http://kan.so/docs/_db/_all_docs?include_docs=true
you mean http://kan.so/docs/_db/_all_docs?include_docs=true ?
:)
rusty
an easy to read format.
read all my docs in raw json
too
hihi
page which renders the whole wiki as static html would be kind of neat
or other exports
maybe
nice
i had a nickel for every time you described a potential feature as "kind of neat"...
you'd have some money, that would be kind of neat
:)
regarding this: a page which renders the whole wiki as static html
+1
we still need api docs right?
also think that would be kind of neat
we're short on a lot of docs.
yeah, I'm working on adding those using package READMEs
think that's our best option
they'll be versioned
written by the author
(or submitter)
yes to easy maintenance.
example: http://kan.so/packages/details/session
^
right
that means I'm responsible for publishing a lot of docs ;)
arrg
requests very much accepted
you generating those readme's?
no, but I probably should
how did your documentation experiements turn out?
we're thinking of auto-generating these READMEs: http://kan.so/packages/details/session
doc.body is markup, right?
*markdown
aaah, yes
with some additions, wiki links, fenced code blocks
(sorry)
that github markdown?
code to render it as html is here: https://github.com/kanso/wiki/blob/master/lib/showdown-wiki.js
a bit of github markdown and a bit of our own wiki-markdown creation
not too bad; i just need to get the non-special comments parsed out and do some css work
it's browndav/ui:build/scripts/ui.udoc.js on GH
be done in a day or two, and then i'll send a link to the docs your way
ok, thanks
doesn't have support for a whole lot of @ directives yet
other option is we revive our old api documentation system
i added @namespace to allow outlining
(it ought to be able to generate trees at some point)
I guess converting between scrawl and your new project wouldn't be too hard
it's just markdown-js and highlight.js
tried to format it with plain markdown but it seems not so usable btw
a find and replace or two
yeah, i'd be more than happy if you did
the wiki links presumably don't render
oh, I guess code blocks too
not required :)
i'll try to get it cleaned up this afternoon/evening
you want to give it a shot, you just need node.js and a checkout; build the docs via `make` and they'll end up in maunal/
`make all` that is
if you're ok using node.js you could just require() that showdown-wiki module
manual, even
don't event have node installed :)
useful for general js hacking whether you actually use much node or not
jea, sure
nice having a JS prompt with a requre() implementation available via command-line :)
uups, I lied, already having node
I am not famil with command line parsing, file reading etc
showdown = require('./showdown-wiki');
showdown.convert(markdown_string)
hmm, actually...
requires a couple of other modules too
quite as simple as that
if you can wait a day or so I'll try to get you some reasonable export option in the wiki ;)
would be awesome
you're lucky, usually caolan just tells people to read the raw json and stop whining.
hahaha
<arnold>stop whining!</arnold>
:D
you're cool
"Real men read JSON!"
...actually, I have not idea if you're male or not
(?:wo)?men read json
thanks
:)
say hi to browndav, my politically correct alter-ego
brace yourself for another chat about spine. i'm running into a dustjs-like situation.
unmaintained? ;)
it's broken
:P
it's "maintained"
think its due to regexps?
:D
its just broken, and i'll probably be the one fixing it
has the same problems
how?
it's a matter of making client side MVC agree with couchdb's opinions
main issue i'm running into is this:
can either explicitly retrieve one record of a type, or all records of that type.
otherwise, you have to build a structure that figures out what should be fetched from the database...
is way clumsier than just using db.getview()
hey, goodbye, will be back these days, despite the *very* interesting discussion. And thank you all!
for now
bye
i'm chatting with the spine devs now… we still may come up with a solution...
any thoughts?
like that's their design decision
you're better off with a url router and fetching the json manually?
remember seeing a couchdb-backbone adapter at some point
see what they've done?
i've looked through that project.
don't recall their solution being revolutionary, but i'll give it another look
guess they're just doing what you've done with the spine adapter
yep
spine and backbone are built to be extended, so i'm looking for a way to make my spine-adapter speak couchdb.
then i'll port it to backbone. :)
then write the docs
:P
opened with "brace yourself for a chat about spine" because i expect to have a specific question when i'm done with the spine devs… but not yet. :)
ok
site is out :D
code block!!!
:D
should I use master now?
on http://github.com/kanso/kanso
ah
http://github.com/caolan/kanso is hanging around for a little bit while we transition
refork
*reclone
cool
can't remember if there's a problem, but will a homebrew Formula be added?
speak to nrw
^
started writing a brew script
you looking for some homework? :)
hah. not really :D
could look into it next week
should be able to do it in one sitting, but i just haven't done it yet.
we'll see who gets to it first :)
here's the ticket for the regex bug in couchbase http://www.couchbase.org/issues/browse/CB-83
you're learning the skill of delegation I see :)
didn't get a response so just filed an issue in Jira
thanks
i had a good teacher
installing couchdb and man, I want to learn erlang xD
is fun
+1
+1
(the want to learn part)
want to learn way too many things.
was +1ing the fun part. :)
some functional programming makes you a better js developer, without doubt
"know" prolog, so erlang's syntax isn't alien to me
if the semantics are different
is it possible to write some erlang as a "pluggable" module in couchdb?
some annoying background task i can't design for and need to hack in?
tried tbh, you can run it as an external process certainly
can also use erlang in view functions, which is fun :)
communication between couchdb and the view server if its native
beam.smp still make-ing
zZz
ACTION looks at his coderwall in shame
"Systems that pass around "objects" become complex, mostly because you just cannot pass objects around and so those systems are just complex facades built around data exchange."
http://blog.ianbicking.org/category/erlang/
hey, facade is a design pattern. *crosses arms*
(not serious)
of my reason for not wanting to turn couchtypes into models on top of json
I understand couchtypes is hardly pure ;)
does github/kanso have an example app?
there's http://kan.so/docs/Simplest_possible_app
the source is on github/kanso
'k
'wiki', 'repository' and 'kanso_home'
install couchdb
==> Downloading http://www.apache.org/dyn/closer.cgi?path=couchdb/1.1.0/apache-c
==> Best Mirror http://mirrors.fe.up.pt/pub/apache/couchdb/1.1.0/apache-couchdb-
(22) The requested URL returned error: 404
Download failed: http://www.apache.org/dyn/closer.cgi?path=couchdb/1.1.0/apache-couchdb-1.1.0.tar.gz
o.o
formula, explained
YT?
hey
would it be possible to add a `kanso open` which would open the project on the browser?
well, that would depend where you pushed it, wouldn't it?
next to me is screaming in to siri
arg
guess we could do "kanso push --open"
something
^ +1 that
make a ticket on http://github.com/kanso/kanso
I'll review it for the next release
pretty trivial
yay, modules achieved =}
so, to use npm stuff
can add "node_modules" to modules?
I wanted to write some Kanso code today, but wanted to ask first so I don't make a pull request that gets rejected :)
sure
wtf, npm installed it in ../
a Kanso app per se, but moving the NPM thing forward
yes, I saw your post on the kanso list
think it sounds like a good idea now
So, the first question is, how strongly are you attached to Git submodules?
are pros and cons
I'd be half tempted to just check the node_modules directory into the repo
node 0.4.x doesn't ship with npm
let me half temp you then!
Briefly, NPM is actually excellent at handling dependencies, and even different components of the same app which depend on different versions of the same package
other thing to remember is, you know all that ./node_modules stuff? That is not NPM! That is how Node works. NPM just puts the files in there
yes, that is now just node stuff, which is awesome
basically, the deps directory can become node_modules and be managed by npm
Awesome, next question: what is the Node 0.6 bug? Is there an issue in GitHub?
https://github.com/joyent/node/issues/2257
ACTION takes a deep breath
usable with node 0.6.x but it sometimes won't exit or will lock up the terminal
recommending node 0.4.x
Ooh, that's gnarly
Well, I think I'll move forward with NPM work and hopefully both will be done at about the same time
thought the bug was a problem with the `parser` package
no, I think I fixed an issue with that during testing on 0.6.x
seems to run on Node 0.6 but the package metadata won't let it install on said
sent a pull request, now merged
Did you see isaacs thinks he got 2257 fixed (45 minutes ago)
no!
that's good news
even be in node 0.6.6 then
so want to use kanso for a project I have in the pipeline
I won't stop you
haha
alas, school comes first
experience is all the education you need!
haha
...unless you're going to be a doctor or something
I want to work professionally in this country xP
I kinda don't, but have to
Next question: to your knowledge, are any of the Git submodules using unreleased code? i.e. if I switch to the packages published into NPM, would it break things? In other words, are you using master branches instead of tags?
there are probably a bunch of master branches in there tbh, you'll just have to untangle it
(sorry)
don't remember any complicated version requirements though
something close should work fine
problem
I'll let you know about the progress
actually had a proper Kanso question too...
iriscouch web site is a custom couchapp. I wanted to break it out into a special-purpose CMS, and then the site-specific content for iriscouch.com can be separate. Then I can release the code.
like a job for kanso
packages are basically their own complete design docs
It's kind of a "CMS for CouchDB experts." The idea is, you write whatever crazy code you want, whatever it takes to render the page. Performance is not an issue. There is no convention to adhere to. Whatever you want.
ultimately, there is a little "bake" button which take the final rendered HTML and stores it all in attachments
production site is just a vhost directly into the doc attachments. (Not even a ddoc)
:)
the question is, is Kanso appropriate?
Yeah, you can actually publish the final output to S3 and serve it out of there if you want :)
yes, you could even do the bake step as you push
potentially
Yeah, the way it works is to build up a "blah-baking" document, which is private
to go live, you replicate just that one doc to your production couch
first things' first. Fork Kanso! :)
chers
:)
I want to add a browserid module
I won't use Kanso until I can `npm install` it :)
haha, we better get it working on npm for you then ;)
=}
shaving
the iwnter?
guys
Hey, don't be hemispherist
I guess if I were in Australia with a yak I would probably be breaking all kinds of customs laws
Okay, pull requests sent for parser and tokenizer
they need fixes for node 0.6.x?
Yeah, the regex object changed slightly. They had assert.equal(typeof /foo/, 'regexp') but in 0.6 it returns "function"
yes
important thing really is that he run npm publish
I sent a pull request for that
right
only one I saw was just the require("util") stuff
wait, is this for tokenizer?
sent one for tokenizer https://github.com/Floby/node-tokenizer/pull/1
I sent one for parser https://github.com/Floby/node-parser/pull/2
the yak shaving. I thought I would be working on Git submodules but I'm debugging a tokenizer/parser :)
I'm cool with that though
I forked tokenizer for kanso
in the repo under src/kanso/data-stream
its specific to the json format used by kanso, so not much use to the original project
nice
needed it to emit events for each document in a big json file
Okay, then you already have this fix. You commented out that assertion
yes, that might be what I remember doing ;)
all we really need is for Floby to npm publish node-parser
Yeah. Oh well. Creative destruction and all that.
Didn't your countryman coin "creative destruction"
D'oh! Scotland != Ireland
D'oh^2 Karl Marx != Adam Smith
:)
...I'm not even Irish
hahaha
well, I guess I have an Irish name ;)
its a reasonable assumption
Yeah I just assumed. I'm from an Irish family but we all just have names like Mary and John and Joseph. Yours is proper irish. I saw you are in BC though, you're Canadian?
brit currently living in Canada
to be complicated
it
mandric
hey
evening.
spending some time getting line numbering to work correctly in this docs tool
cool
line numbers are totally helpful when you have source/docs side-by-side
the spine creator and i just implemented a solution for the problem i was having yesterday
now realize that we just implemented db.getView()
:D
story
oh, really?
yes
well, at least you learned something
..I hope
did :)
i'm now removing my code and just using db.getView
idea, no point maintaining two sets of code
exactly
db module works very nicely with spine
yeah, the core modules should all be very portable
db, session, users, replication etc
i've only spent much time with db and session
i'll hit the others soon
I still need to add some docs for them
my todo list for this week
spine-adapter is on mine
just don't want to document it if i'm going to overhaul it. :P
status: stabilizing.
sense
have a really tiny webapp in ruby
there's some things I want to change
kept thinking about it
this should be mostly JS client-side xD
now I'm torn between backbone or kanso
use backbone with kanso :)
haha
srsly
can use kanso to build a couchapp that uses backbone
might as well :P
to nrw
gotta run
thing that confuses me with backbone is that it breaks in-page anchors
o/
does one define rewrites or url paths in a package?  is there an example of this? i notice if you define rewrites in a package you get a conflicts error.
yeah, there's no way to cleanly merge arrays
can't know which order to put the elements in
you have to explicitly include the rewrites of a sub-package in your root package
= [ {from: ..., to: ...}, require('subpkg/rewrites'), ...]
something like that
they'll get flattened when you push
what do you export from subpkg/rewrites?
i thought you just said you couldn't define rewrites in a package?
seems like you should define something in the subpkg though
can't export rewrites from multiple places
because, as you said, they'll conflict
can put the rewrites in some other module though
(just don't export them from app.js)
you can require that module in your root project
manually insert them into your rewrites there
they are only exported from one place
sense?
but seems like an easy solution would be to just append to the array as you load (order of dependencies?)
order is important in arrays (rewrites especially)
yea
you need to control the order, really
we can't know the intended order
you can with the require() in the master rewrite
the right order might be: the first 5 rewrites from package A, the rewrites in package B, then the rest of package A
yeah, and that's basically what I'm saying you should do :)
don't export them form app.js
in the root project
it's a bit odd you can't make a package using the standard module setup
can, but you're likely going to stop over the main projects rewrites
*stomp
think the A then B then A again case is pretty rare and that would be the case to do the extra work
that rare if you're handling 404s in your app
*not
did think about automatically including rewrites
well wildcards should be kept out of rewrites in a re-useable package
I think its just too dodgy ;)
yea
are just too many obscure ways it could break
do realise its a bit annoying to have to work around exporting rewrites from sub-packages
its not that different to most other frameworks
think it would be a great feature tho to do kanso install registration and boom you're app starts responding on /register/ etc...
yes, that would be cool
also, I like the idea of a single file containing (or pointing to) all urls
liked that when I was working with django
the solution you have is pretty good
the best I think I can do
you have a distributable package then take rewrites.js out of app.js
have some instructions
yes
there's a manual step for the app developer to include your urls in their app
also gives app devs the opporunity to change the urls
guess that would be the only init then?
shouldn't be any other steps
could you throw together a quick wiki page on this?
load some data or something
sure
like this will come up regularly ;)
i'm working on a registration app and hope to get some docs/learnings out of it
to create the stub?
would be a great next step after the getting started guide
did you have a url in mind?
put it wherever you like
ok
feel free to add half-finished pages
have ;)
there any other kind?
heh
you have any docs or thoughts on how to organize packages?
guess i can just look at existing ones but are they noteable different than the main project?
*there noteable differences
from the main kanso.json i want to require('register/rewrites') but not sure what to put in packages/register to make that happen.
from the main lib/rewrites i want to include the register rewrites but not sure how to correctly get the register rewrites on my path...
i could just print my path and see what it is
i'm still kind of new to node etc
app.js you are in a couchdb-like environment
the require paths are the require paths used in couchdb, not filepaths
it depends where your package adds files to the design doc
probably something like packagename/rewrites or packagename/lib/rewrites
i tried those but let me try again
fails on kanso push
what's the path of the rewrites.js file you are trying to include relative to its own package directory?
https://gist.github.com/1441270
like you're exporting two modules with the path lib/rewrite
also took rewrites.js out of packages/register/lib/app.js but that doesn't seem to make a diff
you're inside a sub-package namespace everything
all code has to share a single namespace in the design doc
perhaps rename packages/register/lib to packages/register/register
something like that
so i should create a register/register/lib/
that, yes
like <package_name>/rewrites.js or <package_name>/lib/rewrites.js would be fine
that might be a good convention for all reusable packages
i think i fixed that but now i'm getting
Conflicting property values for "validate_doc_update" caused by the "demos" package
has something to do with this:  packages/register/register/lib/app.js:    validate_doc_update: require('./validate')
yep
ok
can my package define a validate_doc_update?
nope
heh
it was empty anyway
you'll have to do the same trick as rewrites for that
ok, if its empty you can just delete it obviously
again, I thought about making that automatic, but I wanted to keep the merge rules as simple and dumb as possible
push worked
least then they'll be predictabe
*predictable
I meant to ask... You may recall I have a simple browser "port" of the Node request library, request.jquery
it just schleps callbacks between the request syntax and $.ajax()
I really wish it did not have a jquery dependency. Off the top of your head, do you know of any libraries that just provide a portable browser XHR and nothing else?
am I overestimating the difficulty of writing cross-platform XHR myself?
I don't know of any portable browser XHR libs off the top of my head
it would be great to have one
Thanks. If you don't know one, then there isn't one :)
What's that web site listing all those micro frameworks? I scoured it and didn't see any either
Ah, microjs.com
like how Platform.js, the library which detects platforms, works on "nearly" all platforms.
:)
try reqwest, from ded/enderjs
it's very similar to $.ajax, and it should be solid
yeah I remember looking at it earlier and I didn't like its API but I think you are right
looks ideal to wrap with the request API
the package repo down?
ACTION checks
http://cl.ly/0P2k102n143Z310W3K2n
i'm trying to publish
ok
yes!
made a last minute bug in package publishing
there's a fix in the dev branch
it
a README will fix it too
;)
it's got a readme...
shit.
has a readem
that's different, i assume
:P
ok, just rename that
:D
i'm on it
I'll push out this fix in a new release soon
+ kanso is now *quite* usable
the other day you mentioned that you deliberately do not implement duality's data handling as models. do you remember that?
want to ask why that's a good decision
oh, because you're not really dealing with class instances / objects
you're dealing with JSON
like to stay close to the data and not abstract too far away from it
was one thing I really enjoyed about doing some functional programming after python
prefer functional programming.
i'm hunting for a way to work on data in memory in a functional stylle
style*
… and periodically sync it
Backbone's collections?
isn't that implemented as models?
yes, that the functionality i want
does the same thing
i'm wondering if there's a tool out there that leaves records as raw json objects and performs model-like actions without extending the json objects
a tool with similar features to backbone and spine, but in a functional style. :D
i'm going to be greedy
you know of anything like that
(or anyone in the room…)
just use underscore and db.saveDoc db.getDoc ?
:
* :)
btw, I actually documented the db module: http://kan.so/packages/details/db
should tell nrw to use kanso install instead of kanso fetch (update to the dev branch)
https://github.com/nrw/kanso-spine-todos
can send in a pull request
idea
we'll have to update a few places on the wiki too
that kanso-spine-todos project takes like 8 seconds to build and it seems like forever, that's the funny part.
seconds is forever!
why its so slow?
coffeescript maybe
xer0x, you're in vancouver right?
coffeescript
Yep, hey Caolan
:)
makes at least 2 kanso devs here
other one left for germany
if you ever want to hack on a couchapp together just give me a shout ;)
Nice
Should I be working with kanso/dev or kanso/master?
this NPM stuff
coffeescript compiler now compiles attachments. i know you were all holding your breath.
someone on mac try out that --open option on the dev branch?
want to make sure my assumptions are correct ;)
^
sure
thanks
as expected
guess I should really test which commands exist rather than testing the platform then making assumptions about which to use
although, I appear to have /bin/open available, but its not the same as the open command on mac
aah
i noticed the URL that gets printed is wrong now
the end of a push
yeah?
yes
see
doesn't include the rewrite bit, just a link to the db.
thanks, I'll take a look
incoming
there any docs on how the kanso.json file is defined?  specifically i'm wondering what "modules" and "load" mean.
http://kan.so/docs/kanso.json_format
it could probably do with some more info
thanks
"modules" setting is interpreted by the modules package
noticed kanso will load all the *.js files in the "modules" setting
paths that "modules" contains are loaded by the modules package and added to the design doc
yes
.js files
modules, to be precise
so what is "load" is used to initialize something?
"load" property is badly named, but it refers to the module used to export design doc properties from
it's interpreted by the "properties" package
usually, this is "lib/app" or something
"load" should be changed to "properties" or something
to make sense if you are using it to "load" a design doc
?
suppose
for example if I defined var foo = "bar"; in my  lib/app.js that was in the kanso.json property "load" : "lib/app"  what happens with foo?
i did a kanso push for example?
nothing
you did exports.foo = 'bar', then your design doc would have a property "foo" which is equal to "bar"
wild nrw appears
ACTION pokemon noises
anyone here use jquery.couch.js?
nope
so you've successfully married backbone with kanso?
no, i did spine.
is that basically ready to use now?
ready to use
todo app seem great btw
thanks
pushed it to iriscouch earlier, worked great
wrote a readme too
good
it's good to have someone checking my work. :)
;)
i'm using it in a project, and so far, i'm loving it
I'm planning a new kanso release this weekend, maybe earlier
what's changing?
things for the most part
change is combining the fetch and install commands
making it generally faster and better
"kanso install" works almost exactly like "npm install"
tend to avoid npm
:P
know others were saying "i'll use kanso once i can npm install it"
was saying that
else came in saying that, when you weren't here.
orly?
that's a *huge* sample of data!
:)
> backbone? ;P
still, the fact people bother to log onto irc to tell you that is probably a sign we should support it
is sorta the sinatra in the equation, no?
they came to ask about kanso in general, but npm install did come up. you have a point
*googles sinatra*
spine does what backbone does
i like it's style better
roger
if I learn to do some backbone stuff, it transfers easily?
hm
style is quite different, but the api is simialr
so, yes and no
haha
find it difficult to get anything working reliably in backbone
some people love it
:P
like sammy, but I don't think I use it correctly yet
:)
should write a kanso package for sammy
:)
should do a lot of things :(
and i need some competition for the "most packages submitted" race.
days were 72h long...
man, sessionStorage is weird
have to JSONify everything in and out of that, right?
we in backbone land?
JS
don't know. :P
hah! :P
local/session/globalStorage calls toString() on whatever you pass it x_x
Sorry, I suffered a rare irccloud disconnection. Did you comment about whether I should work against the dev branch or the master branch for the NPM work? Thanks!
probably work against dev, though I doubt any changes for this next release will affect your code
I was planning to do a 0.1.1 release by the weekend, if I can help you get NPM support sorted out then let me know
Cool. Yeah a deadline might be just what I need
just pimped your spine adapter on twitter ;)
:)
ACTION beams
can't wait for the bug reports to start rolling in
I'm just glad someone other than me has been able to write a package that complex using kanso
it's really easy
*way* easier than sharing a django app
yikes
the coffee-script-precompiler (now with attachments!) was much harder.
had to rescue me, remember?
:)
oh, you added attachment support?
that's awesome
yep
know you were holding your breath
ACTION *breathes*
:)
I can obfusicate my js from other developers
actually, I love the fact that coffee-script exists
just don't want to actually use it ;)
that first remark a dig on coffeescript?
browser's rython
oh, it produces unreadable js
agree
agree
well, its pretty good for auto-generated js
mean, I can understand it
it's just not fun. :)
programmer: write in coffee-script, commit javascript
right
yes
that's what i did with the cs compiler
then some people who actually work in JS write pretty ugly JS
you, of course. :)
course
<_<
>_>
think of coffeescript as js without semicolons, curly braces, and the "function" keyword...
are the things that make me gag when i look at js
what's a semicolon?
;
has those? :}
better do!
we'll have no semicolon deniers here
pft.
need to get more comfortable with CS
https://github.com/raganwald/Katy#readme
so i have this package that loads a loading message… https://gist.github.com/1449186 now i need a tiny bit of html to deal with the display and render.  one idea i had was preprending it to #content.
let the app/project deal with the rest
you prepend it to #content most duality apps will overwrite it
so create another el in the dom
could actually add/remove the element from <body>
siblings
you could create an element outside of #content
right
mean, add/remove it instead of hide/show it
then you know it'll be there ;)
yea
give it a class name?
id?
stay away from ids if you want it portable?
wouldn't worry, provided its namespaced
#duality_contrib_loader
something...
use the package namespace (convention)
that's what I did with duality-contrib-session etc
to work
this at least
i'm bringing up the regex bug again…
have to run though
you find a way to get regexes working on a mac?
(in couchdb)
(obviously)
can't use couchbase
i'm using compiled sources
is a github repo with a source build
oh
link?
brew?
sec
did brew
my regexes are broken.
sucks
https://github.com/couchone/build-couchdb
https://github.com/iriscouch/build-couchdb
should work if you need build from source
yeah, build-couchdb is cool
didn't realize iriscouch open sourced their build
a while
that's a tool for building Apache CouchDB from source, not the iris couch build exactly
it's different from the source from apache?
think it just uses the apache source
it's different enough to fix regexes…
some optional plugins
hm
think that's more a case of getting the config / dependencies right
i'll do some more reading about it
ok
that's what build-couchdb does
cool
I just compile my couchdb by hand
I'm probably the wrong person to ask
JasonSmith instead, its his tool ;)
it's an automated source build
there's a shitload of deps
to couchdb
:)
it ;)
i'm doing it!
things is a good excuse to make a cup of tea
ACTION puts on a kettle
ACTION puts a kettle on
ACTION is now wearing a kettle
see you are doing the traditional tea-dance
heh
wasn't aware any Americans knew it
i've been hanging out with too many brits
brits, can't trust 'em
ACTION hogs all the scones
amen
:D
http://stackoverflow.com/questions/7049094/how-to-integrate-couchapp-node-js-sammy-and-mustache convert him to kanso!!1!
build-couchdb is used for the Iris Couch builds, and it *does* build a private fork of CouchDB, however that fork is extremely close to Apache CouchDB. One of the "major" differences is to not support vhosts if the connection was port http 5984 or https 6984, so you can't lock yourself out of your couch with a vhost
thanks for the info. :)
ACTION locked himself out the other day
version 1.1.1, "example.com" was considered a different vhost compared to "example.com:5984". It was just keyed off of your Host header value
here was on OSX 10.6 ?
The git submodule for async is using some random commit, a dozen commits or so after 0.1.6
I pin it to the 0.1.7 npm release, you think it will break?
there are a handful of discrepancies with the deps/* checkout vs. what package.json says
the latest npm version of async should be fine
or, if you think there's a version of async that's not published I can do that too
like I said before, a bunch of submodules are not using a tag so you're likely to find some small changes. Just get the closest version and I'll have to do a bunch of testing to make sure things are still working
Yeah, that's my thinking
I'll just run your test suite and we'll have 100% confidence :)
yeeeaaah
*cough*
ACTION backs away slowly
also, notice that bin/kanso modifies the NODE_PATH to include the deps directory, that'll need updating to use node_modules
the NODE_PATH is important, we can't rely on node's automating use of node_modules
is hard-coded into node.js
you get it for free
right, that's what I'm saying... we also need to add it to the NODE_PATH
I tested it before
packages need access to those modules
Cool. Well, if I am successful, there will be no need to set NODE_PATH
will be a Catholic experience
However, it may be an iterative process to get there so thanks for the tip
problem is that the pre and post processors in packages are not run inside the kanso project directory
they seem unaware of the node_modules in there
packages are checked out locally, inside your project dir
pre processors are these?
so, packages can provide build steps to turn your project from a bunch of files into a design doc
oh, *kanso* packages
yes, sorry
this is #kansojs
think those packages should be okay, of course all this is pending actually testing it
the way  node works with node_modules is similar to how Git works with .git
keeps going up until it finds node_modules
thus, children have all the packages that a parent has
right, but the packages are not inside the kanso directory
though they are executed from a script inside the kanso directory
anyway, we'll see ;)
I see
Would you do me a favor? Would you please run this: git push origin dev:refs/heads/npm
the kanso repository?
branch may break things until we get some back and forth to work out all the bugs, so I'm thinking a dedicated branch
yes
think GitHub won't let me request that you pull into a nonexistent branch
yes, let's create an npm branch :)
to branch from dev or master?
think dev
ok
do not think this will be working by the weekend :)
not :)
already have it working with npm link which is really nice
ok, there should be a new branch
symlinks the git checkout into the system so you just work on your code normally but they are visible system-wide
you can npm link kanso?
npm link is kind of weird, it does two dissimilar but related things
`npm link` from the checkout will install it globally
includes putting a command called "kanso" in your $PATH
is nice. It simulates `npm install` but instead of copying, it symlinks to your (presumed) Git checkout
an installed package "foo", the command `npm link foo` will make it seem like a local install of "foo" but it is actually symlinked to the system-wide one
ACTION thinks the latter feature is unneeded for kanso stuff
yes
the first one is useful
Yes, it is idiomatic NPM usage
so, we'd be cutting with the grain a bit more
also, it it works with `npm link`, then it's basically guaranteed to work when users just run `npm install` and it fetches it all from the repo
is doing the hard thinking for us
test/testsuite/lib/rewrites.js has require('nodeunit-testrunner/rewrites'). I'm not sure what package or file that is supposed to come from
oooh, are those kanso modules and not npm packages?
yes
packages
yeah, love it
realised that's broken because I symlinked it to 'packages' in the kanso repository
now I've removed that directory ;)
for bringing it up
That's what you get for being Protestant
haha
most my family is Catholic
fact, I'm pretty sure I was baptised as such
was thinking of the old joke that Mac is Catholic and Windows is Protestant
oh? I don't think I've heard that one
Oh, right, I didn't CC you after all. I sent a pull request to mikeal today saying I was making a branch for a Catholic Kanso (i.e. idiomatic NPM usage)
guess the joke hits better if I set it up *beforehand*
haha
was that for?
ohhhh
node.couchapp.js
that lived in the kanso repo
should be removed at some point, but not now
I'm going to get some sleep now, but I'll have some time tomorrow morning to try out any changes you've made
(which will be in about 9 hours or so)
Ok, you can see my branch already but I have more work coming. I'll definitely send you a pull request by morning but I don't think it should be merged before a release
(stable release)
so, no hurry
ok, I think you're right... too many ways it could subtly break ;)
I'll probably release some other changes tomorrow for 0.1.1
hopefully get this out next week or something
fun :)
whoa!
i just want you to know that build-couchdb has greatly improved my quality of life. :)
so you have working regular expressions now?
yes!
i'm using handlebars
added a note to the end of http://kan.so/docs/Handlebars
you add a link to build-couchdb if it helped?
ahead of you
:)
Hello!
I'm having trouble installing kanso 0.1.0
message?
make install /usr/bin/kanso links to an unexisting file.
"unexisting", just made up.
:)
you do sudo make install or just make install?  maybe it's an old kanso?
reinstall is good
you have previous installations
a guess
echo $PREFIX return anything?
Shouldn't line 40 of Makefile read cp -Ra $(BUILDDIR)/kanso $(NODEJSLIBDIR)/$(PACKAGE)?
mean...
link in the following line is created to include package.
https://github.com/kanso/kanso/blob/master/Makefile#L40
if I'm the first detecting this, it's probably something I'm doing wrong.
Sorry.
39
you have the latest kanso?
Yep.
have tah 0.1.0
tag
hrm then why doesn't the Makefile line match?
line is cp -Ra $(BUILDDIR)/kanso $(NODEJSLIBDIR)
-Ra $(BUILDDIR)/kanso $(NODEJSLIBDIR)  oh but your has $(PACKAGE) ?
Yep.
then...
:)
must not have 0.1.0
was asking if it should not include the $(PACKAGE)
have the last version.
does not work.
me, that is.
should get 0.1.0 i.e. git clone git://github.com/kanso/kanso.git
was asking if it shouldn't include the $(PACKAGE), becase the following line does.
creating the link, see?
you think there's as bug in the Makefile?
Yep.
mean.
doubt it
don't know.
I'm going to try that.
can test right now, what OS are you on?
Linux
I'm using PREFIX=/usr
you installed kanso before?
PREFIX=/usr && make PREFIX/usr install
Yep, using npm.
0.7.0
new version is the first time.
you might want to delete that old one?
try it without the PREFIX?
think /usr might be the default?
/usr/local
if that works
default is /usr/local
want it in /usr
but figured we could see
then try with PREFIX to see if that's the issue
use PREFIX all the time my guess is it's a stale kanso lying around
changed the makefile to include the PACKAGE in line 39 and not it looks like it works.
least /usr/bin/kanso point to an existing file, now. :)
does it point to?
points to /usr/lib/node/kanso/bin/kanso.
think I know what was happening...
good
-Ra $(BUILDDIR)/kanso $(NODEJSLIBDIR) was behaving like cp -Ra $(BUILDDIR)/kanso/* $(NODEJSLIBDIR)
see?
strange
Yep.
So, a kanso dir was not being created and all files put under it.
saw that before
Weird...
I'm using nodejs 0.6.4. I understand that there is a problem with it, right?
yes
0.6.5 actually.
it prevent me from testing kanso?
think so
don't have a lot of experience with that issue
brb...
Thanks, mandric.
np
"Simplest possible app" seems to work... I'll boot up the other machine if I see something failing.
is kanso.setURL and other functions of kanso on 0.1.0?
it.
i see you're making a move to pass me up in the "who submits the most packages to kan.so" race.
watch out!
timer
i'm gonna watch a movie now… ttyl
bye
http://www.pbs.org/wnet/ascentofmoney/featured/the-ascent-of-money-episode-1-from-bullion-to-bubbles/44/  in case you're bored
believe i've already watched this series
<3 pbs
anyone here is in San Francisco, I'm planning to go to the couchbase meetup on Wednesday: http://www.meetup.com/The-San-Francisco-Couchbase-Meetup-Group/events/43759392/
in case you want to say hi :)
guys. I've discrover Kanso this week end and started playing with it. I've created a basic view in lib/views.js, added a views:require('./views') in lib/app.js and a "load": "lib/app" instruction in my kanso.json file. It publishes ok. But when I try accesing the view via the url I get the following error : missing_named_view. Can anyone tell me why is this happening ?
when I look at my design document my view is under lib: and the field views: of my design document does not exist. Is this a normal behaviour ?
can you show me the code in lib/views.js?
sure. http://pastebin.com/tbsqfX1t
the view showing up in futon?
No, I keep having the {"error":"not_found","reason":"missing_named_view"}
i'm sure i can help you straighten this out if i can see the whole project. are you willing to share it?
its a basic project just playing around with Kanso, let me push it on github and Ill share the link
thanks
there you go https://github.com/Spredzy/BasicKanso
ok, give me a sec
are you using kanso 0.1.0?
yes
ok, i think i see your problem, give me another minute
:)
sure
i push this back to that repo?
i'm nrw on github
go ahead
seems i don't have push privileges
i get a hand with that. :)
?
be fixed now
you go
big differences are in the deps and the require statements
project skeleton looks like an older one. the last thing i "kanso create"d looked a bit different.
maybe there's an issue there. :)
me know if that works for you.
it did work
I followed the Getting Stared section on the webpage where it states create a directory so I didnt use kanso create
as reference I was using Kanso-CRUD and blog projects
ahh
that's an old one. i see
well. enjoy. :)
mate. I just saw that the guides in the github page mention kanso create.  But it also states that require('kanso/types') and not require('couchtypes/types')
can I help if I see that some information on the wiki/guides page might not be up to date ?
we'd love to have you update the wiki :)
here: http://kan.so/docs/
"create account" in the top right corner
just did
not being my mother tongue should I transmit my modifications for validation first ?
i'd say you should just edit it. Solving technical problems with the code examples is important.
any of your english is unclear, someone will notice and clear it up.
great
creat came with v 0.1.0 ?
no, it's been around at least since 0.0.7
the project skeleton it generates has changed over time
Ok
I'll edit the Simplest Possible App according to how it does actually work now
for your help mate today. I got to step out. Cheers
ping
hey
Hey, I had an issue yesterday deploying an app and nrw helped me out. It was coming from the generation of my kanso.json, thus I think of editing the directory layout of the  "simplest possbile app" page. To modify create a directory to use kanso create example-app
that make sense to you ? For the Simplest Possible App ?
I'm not sure I follow
think "kanso create" should generate the "simplest possible app" ?
that be the straightest forward way to do it
yes, I'd like to completely rewrite the 'kanso create' command so it can generate a few app structures
create myapp; kanso fetch; kanso push ....;
defaulting to a very simple app like the one you suggest
its on my list of things to do ;)
then you'll have to create the structure by hand I'm afraid
its simple to do
agree ;)
:)
Nice
way Kanso is a great job, I love the modular way it brings to developping couchapp, and if the community needs help for documentation editing / coding or whatever I would be happy yo help.
great, thanks!
thanks... next, I really want to see node v0.6.6 released and npm support in kanso ;)
Well I think we are still a few days away in Kanso so don't let v0.6.6 block you accepting or rejecting my pull requests :)
:)
to build my first Kanso app (ever, 'shamed to say) today
how's that working out?
not too painful
up some other work, should start later today
ah, good :)
It's the project I asked about, it's not exactly a couchapp so I'm unsure if it will fit Kanso or not
yes, but its build from a couchapp right?
*built
have two projects and am thinking about merging them or something
is a Node program pulls down a couch db and generates a bunch of static .html files from templates
other is a couchapp that does the same
ok
the common thread would be possibly the templating, and definitely the deployment
idea is to replicate in order to push to production
(The entire site lives in one doc, as attachments)
is for a new npmjs.org web site actually
ok, interesting :)
build one page per package, so 6,000 pages or something
(No idea if couch docs can do that many attachments. I think it shoudl be fine)
it'll be intersting finding out :)
want to be able to host it from nginx off the filesystem, or even S3. I'm going to get it working from just couch attachments, which is fine. But I know what wil happen. The fact that couch is right under there and easily accessible... they're not going to give that up
First actual question. A hypothetical app that is served totally from attachments (vhost -> /db/doc/), could I still get to the couch and db api somehow?
yes
create a rewrite to a higher level
"/_db", to: "../.."
something
Sure, I mean is that any feature of Kanso or do I still need to make a rewrite
oh, you make a rewrite
you're using duality then it creates a few for you
there's not need for you to use that
Like, perhaps Kanso has some pre-baked thing that rewrites me from /couch to ../../../, from /db to ../../, and everything else to my doc attachment namespace
?
right
so, framework packages might define some rewrites
if this doesn't exist, I'm thinking of creating it, a new kanso module for this style of couchapp
ahead!
:)
site plus
yeah, sounds great
for people to get started with too
would be a good piece of code to look at for ideas on how to implement that?
"framework package"?
build a framework package like a normal project
perhaps nrw's spine-adapter might be a good starting point
projects created with kanso are the same as packages
Nice. I guess I would expect nothing less :)
it has a kanso.json, its a reusable package
Incidentally, what is your favorite way to make apps these days? Spine?
right, but you have to be really careful about namespacing things because the design doc is a shared namespace
no, I use duality
its basically got no documentation at the moment ;)
that's the code that implements the design doc api in the browser
use it for all of http://kan.so
it'll render for search engines and browsers without js etc
right, Duality is basically the old Kanso right?
right
well, the browser code part
the node.js script is now the new kanso ;)
ok, I'm going to get some sleep in a minute
exporting rewrites from your framework package, see the properties package
http://kan.so/docs/Defining_queries
thanks, cheers
^ that page tells you how to use it to export properties from the design doc (eg, rewrites)
let me know if you run into any problems
then! goodnight
hello, where is admin app in new kansojs?
caolanm ! quick question: think batman.js would be a fit for kanso? now that there's duality and spine, perhaps this is also possible?
loob2
should be able to use any js framework with Kanso
just a question of packaging it up so others can share your hard work ;)
:-)
me take a look at batman.js and see if there's anything scary
looks like it should be fine
I think so too… I'm not sure yet if I'll eventually go that route… regular couchtypes seems to be good as well
well, you could combine batman and couchtypes
batman for routing etc and couchtypes for document validation
it looks like you can use batman.js as a commonjs module
that's a good approach for kanso
will investigate further
you can avoid some manual steps associated with adding script tags
let me know if you have any questions
and thanks for all the hard work regarding the new release
did miss the basic admin app, though… is the one in the separate repo compatible with the latest release?
yes, was just about to reply to that ;)
is a couchapp in its own right
it to the same database as the app you'd like to manage
should still work but hasn't been tested in a while
it would be nice to add a guide on the wiki for using that
ACTION cofcofthat's a hint for you loob2cofcof
locks ;)
...seriously though
has been a nice quickstart for prototyping
;-)
admin app?
well, that was the reason I created it... for prototyping more than actually using it to administer your app's data
the documentation already a little different from the actually code?
what's up, getting some error?
yeah the simple app example say to go to index.html but there isn't any
is welcome tho but I think I am missing something cause when I check the db the attachments arn't there.
you sure you didn't accidentally skip anything?
tried it recently and got it working
I'll give it an other try.
I put a file in templates it will be pushed to the database as an attachment?
http://cl.ly/Ca75 this is my hello world
don't know much more to help you
(that's chocolatapp.com for you mac users)
nice
I found a Crud app on the google group so thought I tried that but it mentions kanso fetch
seems my kanso doesn't have a fetch
"kanso fetch" is now "kanso install"
it'll work the same
Kanso-CRUD> kanso install
No such command: install
which version of kanso are you using?
-v
0.0.7
ah
see
whoa, that'll be why
;)
lol
woops!
just cloned it off github without thinking
ah, right from github.com/caolan/kanso no doubt
might remove that repo
at least remember to update it
the new kanso repo is at https://github.com/kanso/kanso
super! thanks.
say kanso looks really great.
my home made solution
see if I can convert my invoice app to kanso.
great :)
me know if you run into any problems
I'm going to be wandering in and out the room a lot today so might not respond right away
the docs should get me pretty far.
to push a couchapp and getting this error:
doc_validation
special document member: _docs
here's the app https://github.com/vetula/coconut
i do couchapp push i the same dir i get  [ERROR] couchapp error: You aren't in a couchapp.
i must be doing something wrong...
uses this: https://github.com/janmonschke/backbone-couchdb
hmm, not sure what's going on there
like they use erica?
clue just wanted to try out this coconut thing
basically when building the couchapp there's an extra property called _docs on the design doc
properties with leading underscores are reserved by couchdb
presumably something in the build is not completing and deleting that property before pushing
well
there possibly docs on how to enable/support a setting in a package?
you mean read a value from kanso.json?
yea, i want to add a setting for the duality-contrib-loading app...
the timeout value
can read it from require("settings/root") if the root package has the settings module
...I'm actually going to fix that so that if any package requires the settings module the root one is available
or, you can get it in a preprocessor or postprocessor and do something with it there
the duality-contrib-session package uses the former approach:
https://github.com/kanso/duality-contrib-session-hb/blob/master/duality/contrib/session/events.js
it requires settings/root and reads a value from there
?
back
got it thanks
it not possible to have .coffeescript and .js scripts in the same directory?
It's raising the following:
couchtypes/remove_property
Error when running postprocessor: "modules/attachment"
Invalid path: libs/ko/mapping
I make it a .coffee script file it works
what does your kanso.json look like?
{
    "name": "Porks",
    "version": "0.0.1",
    "description": "Invoice application",
    "attachments": ["index.html"],
    "modules" : ["lib", "libs"],
    "coffee-script" : {
         "modules" : ["lib", "libs"]
    },
    "dependencies": {
        "attachments": null,
        "modules": null,
        "coffee-script-precompiler": null
    }
}
both 'lib' and 'libs' contain .js and .coffee files?
libs has .js files
will be pure coffeescript file normally
hmm
there is a file libs/ko/mapping.js ?
yep
it looks like it's not getting added to the design doc by the modules package for some reason
maybe the coffeescript package is overwriting it somehow
can you try to make a simple app that recreates the problem? then I'll see if I can write a fix
Sure
thanks
https://github.com/Enome/kanso_test_mixed_files
raises the same error
great, I'll take a look in a few mins
awesome
did you forget to commit the lib directory?
oh
Error when running preprocessor: "modules/add"
ENOENT, no such file or directory '/home/caolan/projects/kanso_test_mixed_files/lib'
it's actually just empty here
that's why it wasnt commited
ok, I'll create an empty dir
I get the error
have found a minor bug trying to push the kanso testsuite http://cl.ly/0f2c2S2F1d0W0I1g3X0U
yeah, looks like something is still relying on couchtypes-forms
if you can grep for the package that's doing it
ok
it'll either be the testsuite itself or one in your testsuite's packages dir
testsuite itself
I see the problem
have a file and a directory called 'ko'
aha
libs/ko/ and libs/ko.coffee
Yep, I see
can't handle that
it has to be stored as a JSON hierarchy
(without file extensions)
I think what I need to do is make the modules and coffeescript code give an error when that happens
a more meaningful message ;)
that makes sense. With my homebrew I was just using browserify and making one big file.
I'll rename.
a lot for taking a look.
np
brb
was couchtypes-forms replaced by anything?
was merged into couchtypes
including couchtypes should be enough
ok
anyone else using spine-adapter?
not yet
have yet to try my hand at some browser mvc actually...
I'm just curious if anyone is experiencing any bugs.
bbl
I can't middle click on links on http://kan.so and open them in a new tab. Is that a bug?
works for me
if its not working for you then I guess its a bug
to, for Home and Tools
others are fine
I'll look into it
Can't remember if it was FF/Linux or Chrome/OSX
I'm on Chrome/OSX
wow
it's mangling stuff
http://cl.ly/CaRW
this related?
possibly
home?
to kanso install the admin app, getting http://pastebin.com/ei4aan7b :(
apparently the admin app is no longer up-to-date with the latest kanso release
:(
any boilerplate app with forms that warks with the new kan.so?
unfortunately no, I was looking for the same thing and asked caolanm yesterday about this too
:) yesterday he told me to pull kanso/admin (instead of the old pushadmin)
he's probably asleep :)
I'll try to figure it out
told me the same thing ;-) but he wasn't so sure it was 100% ready
thanks
should probably look into the admin app as well in the coming days or so
omg, what did you do to the wiki :o
Just modified something that according to me wasn't accurate. Did I mess up something ?
na, just messing with you ;P
nice to see more contribs
me. First time I am modifying something on this wiki, I was afraid I didn't follow a specific rule.
:)
hehe
know the feeling
made some commits to rubinius
scary as hell
when I broke the build :$
careless and removed some tests that I shouldn't have
you get the whole community swearing at you
;)
there's git
Couldn't agree more !
really going to push for npm support in kanso 0.1.2 btw
node 0.6.6 is out
disappear for 3 days and everything changes. i see we've been busy making the kanso cli more npm-user friendly.
a positive response?
you're talking about "kanso install" ?
that's the first thing i noticed. :)
also have a real npm install now, right?
yet
oh
on that bit
an npm branch :)
next release
ah. i see my packages got some air-time on the mailing list, too
others will report bugs. :)
we were just discussing creating a backbone adapter
presumably there is a lot of crossover with the spine adapter?
ogden's summary of the couchapp community meetup yesterday for those that are interested: https://gist.github.com/1487663
I've merged the npm branch into 'dev' in the hope this forces me to get it done and released ;)
it's looking pretty good now, both npm install and make install seem to work
my invoice app to kanso.js. Went pretty smooth :)
http://porks.iriscouch.com/porks/_design/Porks/index.html
it's for invoices
yes, just seen the tweet :)
nice!
peeping tom!
any js frameworks?
knockout
hmm, not used that before
you including it as commonjs modules?
had to adjust it a little since it's just a browser script
yes, I see
https://github.com/enome/porks
would be great if we had a reusable package for knockout
it just the code in lib/knockout?
sorry, app/libs/knockout
added some extra's for my app
ok
is great to get started fast but I found it was lacking in some areas
nice, you're even using some coffee-script modules
yep
did you find kanso?
ok?
found it a while back but it was different then
I saw it on twitter somewhere a few days ago.
read it went from a framework to more like something you could use with other frameworks (yeah bad at explaining).
I checked it out again and was pleased :)
app looks great
should get a page together on the wiki for couchapps people are working on
...in fact, I think there might be an old page for that (dating back to when kanso was a framework)
http://kan.so/docs/Companies_and_projects_using_Kanso
yeah I saw that. I need to do some major refactoring first and if you like I could put a link up
to you of course, but might be useful for others wanting examples to learn from or projects to contribute to
app is mostly for my mom haha
I don't mind sharing
everything is unit tested so most stuff should work
was just thinking it might be useful for freelancers
of developers have to send out invoices
yeah
you listen to the nodeup podcast? I heard they were redoing the npm search site which is a couchapp. Might be a good way to get attention to Kanso.js if they used that.
not sure what their plans are with the npm search site people had to stay in the channel after the cast but I only heard it later.
yeah, I know about the new npm site
think there is already talk about using kanso for that
great.
http://dailyjs.com/2011/12/16/kanso-recipeswithbackbone-appify/ yay!!
sweet
can I run the kanso/test/testsuite/tests folder?
so, after I merged the npm branch into dev, I then merged your pull request into the npm branch
basically, we're still working on the npm branch for now ;)
Yes, good call
think I should do some restructuring and push much more code into the kanso packages
than have them require things from the kanso NODE_PATH
is clearly broken
package should be as self-contained as possible
(package == kanso package)
a conversation about the interaction of two package managers is confusing sometimes ;)
think there needs to be an IRC bot in this channel
if you say "package" and the word before it is not either "kanso" or "npm" then it /kicks you
haha
I'd get kicked all the time
now we're having two conversations, one on github one in irc
Anyway, my goal, or aspiration maybe, for the npm branch is that nobody ever needs NODE_PATH
think the github one is wrapped up. Hopefully
didn't agree at first (mostly due to laziness), but now I see the light
also want to take more code out of the kanso repo altogether
push it down into packages
that's probably prudent. Although I watch node-tap closely, and isaacs had *lots* of subpackages for lots of stuff
the rain dance of publishing and updating dependencies was not worth it, so he pulled them all back into the one master project
We're grown-ups, there's a correct balance that shoudl be obvious
example, src/kanso/modules.js is used by the modules, properties, settings and duality kanso packages, but not actually used by kanso itself
why put it in the kanso repo?
just something that hung around after it stopped being used
should be installed in each of those kanso packages, in their node_modules directories
brb
guys. Quick question. When I am pushing my app and then going to the URL kanso gives me everything loads fine but the file kanso.js it gives me a 404 Not Found. Would someone know why ?
(From Chrome console) It tries to load (/app/_design/app/_rewrite/kanso.js)
YT?
hey
on Kanso today. I also had a question about a Kanso package
ok
have a reduce function that I use a lot. I like to emit objects, like say all backups for each server
{"files":2, "size":12345}
I have a reduce function that accumulates each key so my big reduction is {"files":10000, "size":12345000} or whatever
was wondering if I could make that a kanso package so my reduce function coudl be like...
function(keys, vals, rereduce) {
require("awesome-reducer").reduce(keys, vals, rereduce) }
that a viable Kanso package project?
yes, you could even export the reduce function automatically if you're feeling brave
if you always name it the same I suppose
also has a special case where if the key is "count", it increments it if rereduce == false, and it accumulates it if rereduce == true
want a hand getting started?
want to say in kanso.json dependencies: { "awesome-reducer": null }
problem is, I don't think you can require from the top-level ddoc
sure!
ok, let me throw together something real quick
perhaps get me a git repo to push to? or I can gist if you prefer
it somehow has to install the module in .views.*
do you want to require() it or automatically add the reduce function to the design doc?
I'm asking what's the best bang-buck. I'm also looking for a Kanso project to just get more experience with it.
ok, let's automatically export it because that's fun :)
I'm also hoping people could have a nice versatile reduce function without thinking about it... i.e. modular code reuse
hmm... project name. All I can think of is easy-reduce
is the preferred spelling of kansojs? Kanso.js?
"Kanso" I think
cool, I have a package ready
me to gist or push to a repo for you to work from?
GH/iriscouch/easy-reduce
to remember how to add committers
Are you caolanm on github?
no, just "caolan"
it's coming back to me
easy-reduce repo?
ok I think you can push ther now
ACTION tries
should have gisted :) I didn't know if it would be multiple files
2 really
this gives you something to work from
is being slow
ok, there we go
I wrote https://github.com/iriscouch/fixed-event. I refactored it out of a lot of internal projects
like to queue up 20 things to do, all of them contingent on a successful ping of couch
yeah, I can see that being really useful
now I can say couch.on('ping', function() { do_stuff }) and it will fire after the ping is done, regardless of whether the ping hasn't completed yet or whether it has
of like jQuery's document ready
exactly
:)
spent more time looking for duplicates of the functionality than writing it
was like, "surely somebody wrote this damned thing already"
you'd think so!
think I probably did it manually before
wrote traceback (github.com/iriscouch/traceback) and I was 75% done when I realized there are a bunch of similar modules
having it built into eventemitter is nice
may lobby to get it built-in. The only problem is it is a memory leak by design
hold that result of the first emit forever, because anybody could add a listener at any time and you have to re-send it
ACTION just realized he is well-caffeinated
:D
how's the kanso package look
sense?
Okay, this is a Kanso app?
yep, you can "kanso push <url>" to see it work
Pushing
use it as a package just "kanso publish"
you can include it in the dependencies of other apps
Right, once this works, what I want to make is a package for other people to get awesome-reduce
and apps are actually the same thing
see
use the same kanso.json format
want it so that if somebody finds themselves emitting objects and it makes sense for the reduce function to just accumulate each of their keys, they could do that in 1 line of code
I on the right track for that?
right, so I guess you really wanted a module that people can require in their reduce functions?
I just made you a reduce function, not that
right
I would also like to write unit tests, maybe in Node
(perhaps not part of the kanso package)
(but part of the Git repo, so I can build up a couch database and make sure the reduces come out right)
that's ok, just throw that into the directory and add a .kansoignore file so they don't get published
cool
ok, so want me to update it so there's a module in views/lib/* ?
of exporting a reduce function from the ddoc?
sure
am about to commit the function itself which might make it clear
idea :)
only for now
ACTION is not looking forward to backporting to pre-ES5
guess its not a big deal if its designed for spidermonkey
its for reduce functions
I like to use Array.reduce in my reduce functions
fit quite well. Although I'm on the fence for doing that long-term just because it's hard to understand a reduce function
(Javascript reduce function)
guess I'm used to them
probably are a barrier to others
Okay, this is more or less my reduce function
https://github.com/iriscouch/easy-reduce/blob/master/easy-reduce.js
an update with a test to helpfully clarify
ok, just updating it now
ACTION pushed a minor update just now
agh!
time I try to push
haha
finally!
ok, take a look
C'est la vie
the module gets added to views/lib
kanso.json:
names, version and description are self-explanitory
modules property tells the modules package which directories/files to load
modules_attachment property tells the modules package not to create a modules.js file for use in the browser
only dependency is the modules package the above two properties are related to
then, you just put the commonjs module (easy-reducer.js) in views/lib
path from the project root is the path it gets added to on the design doc
now people can add "easy-reduce" to their dependencies
they get views/lib/easy-reduce.js automatically?
yes
well, after you do "kanso publish"
sure
you used commonjs in the views ever? I still have not
I cut my teeth it was still not allowed
have used it
Wouldn't couch think that there is a view called lib? Like, /db/_design/ddoc/_view/lib
yeah
sure what would happen if you actually hit the url
looks like it ignores "lib"
maybe its because it doesn't have map or reduce properties
my main concern is not that so much, but rather that couch tries to send it every update from the db
there is the cost incurred of teaching couchjs a view function and then throwing an exception, plus spamming the log
don't recall seeing anything in the logs last time I did this
you'll have to experiment a bit
no, it looks like "lib" is special-cased
https://github.com/apache/couchdb/commit/7665e44
:)
you have to say require("views/lib/easy-reduce") or at least that would be my goal
suggestions for a better name?
hmm
Also, is it possible or reasonable to look into arguments.caller.caller or whatever and get the (keys, vals, rereduce) variables that way, instead of making the developer write them out every time?
suspect that is either not possible or in any case not wise
magic imho
yeah
node/v8, it looks like you cannot
can see "this" from caller functions, but not arguments
want to try publishing, or are you still coming up with a name?
Sure I should publish
ACTION awaits kanbot's announcement
ACTION reads how to publish
do I ignore a "test/" subdirectory
"/.test/" > .kansoignore
is how .gitignore would work at least
yeah
.kansoignore works like .npmignore
should be able to use * etc
guess just put "test" in .kansoignore
put "packages" in there too
all its dependencies are available in the repository
I'm getting into absolute paths now
so many projects pull in sub-projects, or packages or whatever
"test" in .gitignore will add ignore rules to projects you import, and I've been bitten by that with npm packages
now I like /foo
so the packages/ subdirectory is for my own publishing to my own couches?
should I just delete it all?
can delete it
yeah, its for pushing the package to your own couch
app that depends on this will have its own packages directory with all the dependencies in
this is just extra data to download from the repo that won't be used
weird, I just saw a couch crash for kan.so. Captured the log
wish kan.so used BrowserID :)
would make it not 100% couch compatible unless I guess I propose to merge that plugin
Couch runs it FWIW
Error when publishing. Ring any bells? http://friendpaste.com/b6bJ9kXOBmFrDIaQXkBYa
you using kanso v0.1.1 ?
hmm, using my npm fork :(
I merge to a later branch?
(The idea is to exercise the npm branch with real-world activities)
I'm tired of copying and pasting this damned reduce function everywhere
yes, good idea
the 0.1.1 version of kanso if you don't mind install that
*installing
we might be able to narrow it down to the npm branch, or see if its a more general problem
know I fixed a publish bug in 0.1.1 that existed in 0.1.0
that helps
BTW, I think isaacs finished a really nice tar module for Node
100% Javascript, no external tar commands
think the error may be because of Darwin's tar
awesome
know he was working on it
branches
that'll be really useful when I get around to porting Kanso to windows
or, more likely, when I get someone else to port it
know nothing about win programming
you 100% linux?
yep
really use a mac just for testing
mini is good for that
travis has macs, not sure
ACTION is just getting into travis
use Iris Couch now
non-mission critical though
Okay, I think this is a bug for Darwin/OSX, also in 0.1.1
ACTION debates being lazy and committing it into the npm branch but I know that's bad form
Holey.  Moley. That was awesome.
:D
I really depend on modules or was that a vestige of the original commit?
do depend on it
loads the file and adds it to the design doc
see, so hardly anything could do without the modules package
right
BTW, what's with the "null" values for all the dependencies?
you're using the node.couchapp.js module to load the file
"null" just means "I don't care which version"
better to be generous with versions in kanso, unlike npm
an app can only install one version of a package
Oh, nice. I heard Isaac talking a while back and he said the NPM semver implementation is by far the most complete. FWIW
to the shared namespace
I'm using the npm semver lib
oh, nice
parsing version numbers etc
you can do 0.1.x or  >= 0.2.3
the version bit
a big deal at this point, I suppose
if you add a README file it'll show up on the site when you publish
README.md and README.markdown get parsed as markdown and converted to html
(you can't embed html in it though)
Cool. Yeah I usually write the README and the first set of unit tests at the same time, at least for new projects
I know the next pakage I want
:D
want it so that I can depend on "request" and in my attachments I get the latest version of request.jquery
good to me
it won't be jquery, I will re-implement it with https://github.com/ilinsky/xmlhttprequest
oh, you found a library for xhr?
guy seems to have done the hard thinking for us. c.f. http://www.ilinsky.com/articles/XMLHttpRequest/
looks good
ACTION watches on github
Yes, his article about how to make a portable XHR, I think it demonstrates that he's put pretty serious thought into it
my own couchapps, I want static pages and request() and I'm like a pig in shit.
Do you work with xhr much?
was wondering if it is possible to "stream" the data from a request instead of waiting for the browser to package it up into a string
I want to follow _changes?feed=continuous but if you do that with jQuery you will never get called back
I'm pretty sure you can't stream data
might be able to keep a connection open in an iframe and read from that somehow
sort of stream
that is correct (and I think it is) that would be a good reason for couch to support websockets for _changes
yes
now I can use longpoll
yeah, its good enough and works in all browsers
So, if I wanted a client-side module, so they could say require("request") and get a request function, how do I hook into kanso's module builder thingy?
it as a module like we did for the easy-reducer modules
*module
then, they can specify "modules_attachment": true
add <script src="modules.js"></script>
just require('request')
right. Because request() is useless/meaningless in the design doc
yes, but it'll get put there anyway
fact I wouldn't even want it present except as an attachment (just so it doesn't bulk up the document size)
it'll also be put in the modules.js attachment
OKay, so at present there is no "attachment only" module type?
I'm still too green with Kanso to suggest big architecture ideas, but it seems like that might be a really nice way for people to publish client-side code easily. Instead of just saying "put this in your server somwehere... now paste the following into your HTML, now..."
kanso.json: dependencies: { "jQuery":"1.4.2", "sugarskull":"1.0.8", "YUI":"3.x"
there
question: what's the current status of the 'pushadmin'? It's now missing from the list of commands and I've found a separate app on github/kanso/admin
kika, its now just a separate app
to push it to the same database, but it doesn't see the app
aha, thanks, I've found it
how to integrate it with my app?
push it to the same database
yes... there's a bug atm
that
hadn't been updated in a while
the app listing page seems to be broken
I'll get around to fixing it at some point
yep, it's empty
until then you can get to your app by appending the name of it to the url
works, thanks!
great
I'll get a fix sorted for that soon
there might be a few other things broken
them on the github page for the admin app if you find any problems
well, it's not pressing, but it's convenient to have a short circuit to the data manipulation while you don't have it in your code yet
sure
thanks
I will rebase and push --force easy-reduce. I don't think you'll need to commit anymore but just FYI
ok, battery's about to die
cheers
bbl
very much for your help
for the great tool!
I'm looking for good mac binaries for apache couchdb
know where I can find some?
any idea where I can find a binary version of couchdb for mac?
getting couchdb installed is a real stumbling block for new developers
Sorry, I closed irccloud
np
couchbase single server binaries are basically couchdb
know they won't develop it further, but it shoudl work fine for the near-term
actually wrote that installer and it's based on build-couchdb FWIW
great
other news, I renamed easy-reduce to "stew" and it is passing 47 unit tests
"stew" like it :)
Okay, how do I unpublish easy-reduce?
unpublish easy-reduce
ncie
I using SSL here?
I think I'm done. caolanm Whatcha think? http://kan.so/packages/details/stew
whoops, forgot I can't add tags. Mind the <a>
thing is I haven't tested it at all in couch yet :) But I'll replace an internal project with stew today
TTFN
looks good
laters
Hey. What do you guys mean by admin app ? I was looking a the 'easy' ticket on github and all of them are related to admin app. What does it refer to exactly ?
it used to be part of kanso core, now its a separate app
auto-generates some forms etc for created content types
are defined using the couchtypes package
its in a bit of a broken state atm
Thanks for the answer. So tickets related to it can not quite be resolved atm ?
right now
I'm heartened you're looking for some easy kanso tickets ;)
started the easy way ;)
I've been writing docs on the forms this week end
ll try to make a bit more consice and publish it within this week
:D
I've faced 2 issues you can might help me with. I was planning on finding the reason why today but you might make me save few hours
s/might/maybe
:)
1. At loading the url kanso gives me after a push ending in _rewrite, Chrome console tells me that it couldnt find kanso.js 404 Not Found
i'm getting a strange rendering on kan.so  http://cl.ly/3O223h3y0x2W0N1i2M1O
it's even better now  http://cl.ly/1e3H03273t442s1b2B21
I just pushed an update
uhhm, is it still broken?
just did shift+refresh…
I should probably revert if its that bad
my clear cache?
ok
thing is it's just the front page
for us on chrome on mac
crazy extensions?
can't shake it
hrm
damn
might have to roll back until we work that out
might just be that tab
it working in another tab?
crazy red bars are supposed to be there, just not the blue ;)
with those red bars is funky
it just disappeared
(the red bars)
they're animating
very slowly
right they're animating!
:P
hehe
seeing blue?
i think my browser freaked abit
you should take another screenshot?
http://cl.ly/472B252J3s08360p0x3d
ok, we might need to turn off the animation for your browser
on chrome I guess
?
version?
i do not have the latest udate
update
i'm on 15.0.874.121
is 16..
really shouldnt cause the issues
I'll try turning off animation and re-push
can you do another screenshot after we try that?
to see if that's really the problem
don't upgrade yet!
(we might be too late)
heh, well it seems ok now
chrome 15?
yea
dear
favourite kind of bug
mean it looks awesome now>
:)
like the new design?
it's looking pretty awesome, my browser is even sweating a bit.
your mac doesn't burn through your desk
chrome helper cpu is at 15% steady
i close that tab ;)
is painful
*high fashion*
so, do we a need to revert or do you think we're ok to keep this up?
assume you can turn off the animation if people complain no?
yes
already turned off for firefox
it was jittery
there's not much on the home page anyway ;)
yeah, just click the button already and get installing
than sheer bliss
:D
ok, I think I'll leave this site up for a bit and see what feedback we get
yea
thing you might want to add to the install page is that kanso requires couchdb >= 1.1.0
yeah, might be a good idea
well, "duality" requires 1.1.0
aah
performance is greatly improved when using commonjs modules of course
it looks like the Tools menu changes back and forth from Install to Tools
yes
think its clearer
ohhhhh
bug
yes, you are right
i think the Simplest possible app link at bottom of Install is broken
yep, just fixed that now I think
works
install/tools problem should be fixed now
thanks for your help testing
np
starburst effect on the homepage is constructed using css3 only
it was css animation
tricky to get the triangles
to make divs with giant border sizes
neat
ok, I'm going to get some sleep
laters
oh, I just realised I didn't help you with the app
np!
can try to catch up tomorrow
ok, I'll take a look tomorrow :)
thanks!
bye
people please try out the new http://kan.so homepage and let me know how it renders in their browsers?
includes ambitious use of css animations
know it's possible to host your own domain on a couch instance by modifying the vhost config section, but is it also possible to host your own ssl site?
i configure couch to use ssl certs that i specify?  basically i'm wondering if i can use my own domain on irisouch and have ssl support without the warnings.
^
;)
like 3am in Thailand, so I guess he might not be around ;)
he'll probably get around to it though seems to keep his client on all the time.
I'm still not entirely sure he sleeps
batches that process out to one of his many couch instances
:)
U-U-Ultra Kill!
aren't you a vegetarian?
yea they kill too… not mammals tho.
I also kill fish
well, not me personally, but I condone it for the purposes of me eating sushi
Site looks great to me, I'm using FF8 on Linux.
thanks
doesn't get the animated background atm ;)
was a bit jerky on FF
don't get the joy of seeing one in chromium either :(
quite subtle
red bars move slowly
Ohh
YEah
notice it now :)
subtle
;)
good in Midori too!
one's pure luck ;)
to admit we didn't test in midori
uses webkit anyway
ok
i'm refactoring coffee-script-precompiler and i'm stuck, anyone got a sec to help me solve a problem? i'm fighting with the async module
broke my compile function into several parts and need a way to pass extra variable to async calls
https://github.com/nrw/coffee-script-precompiler/blob/master/src/compile.coffee
got a minute?
hey
sure
you get the previous 4 messages?
shall i paste them?
see them
so, what's the problem?
need "settings" and "doc" from "run"'s args
each async call
setting a global variable seemed like the wrong way to do it
:)
i pass those in somehow?
i'm looking at this
https://github.com/nrw/coffee-script-precompiler/blob/master/src/compile.coffee#L20
ok, I see
you want it in javascript instead… https://github.com/nrw/coffee-script-precompiler/blob/master/build/compile.js#L26
use async.apply to apply arguments without calling it
so:
fn = function (a, b, c, callback) { ... }
fn2 = async.apply(fn, 'one', 'two');
fn2('three', callback_fn)
result in fn('one', 'two', 'three', callback_fn)
looks like it'll work.
thanks.
or... you create an object with methods and store state in that
I prefer to pass it around explicitly
or, as you say, just use state in the module
global state
yeah, you have to clear it on each call to run
in case
miss haskell
:)
yeah, I recommend async.apply
i'm sure i'll let you know how it goes
:)
Was it Node 0.6.6 that has the fix Kanso needs?
yes
So then it works on 0.4.x and ~0.6.6?
yes
you have a style guide anywhere?
just "whatever is the most boring" :p
Semicolons
breaks at 80
with no lemon
yes, the most boring please
np
every time i ask about style conventions, coalanm tells me "whatever feels right"
you're not hacking on kanso core atm ;)
:)
I'll bring down the style hammer
sweet
multi-line if statements preferred
style is worthwhile. I nitpicked style from some pull requests I've gotten and now I regret it
(foo) {
should have merged then committed a fix
yeah, hope you don't mind me making style fixes to your patches
favorite style is "consistent"
close second is "whatever Jason likes"
so, sure
ok, when I make the style fixes its "eventually consistent" ;)
:)
have a commit message style guide
present-tense, second-person
It's the most concise
ok, sounds good to me
"added"
why?
not "add"?
I'll try to remember this rule ;)
you running from the upstream dev branch now?
exception is just stating a noun describing what it is, like "HTTPS tests"
Finally, any command that generates code (including `npm install`) is prefixed with "Run: "
commits indicate how you modified that generated code. But I'm rambling
Yes, just pushed some minor work
iriscouch/kanso dev branch
I'm trying out backbone on kanso atm
used backbone before
hows that going?
days
added a backbone package to the repository, so I'm using that :)
if I need to make an adapter like spine-adapter
looked like it was missing an adapter
yeah
:)
got way into Knockout.js several months ago. I liked it then but frankly I am now leaning towards 100% request()
I'm not sure if its normal to change couch to the backbone api, or change backbone to use the couch api by overriding the sync method
it's the style of apps I build
think you could probably rob backbone-couch
that XHR lib you found looks promising
problem with Knockout is that it was IE 6 compatible, so it didn't use __defineGetter__
it really broke the illusion that you have a normal Javascript object and it just magically syncs to couch when appropriate
see doc.foo, you had to run doc.foo(). To set it, you had to do doc.foo("new value")
odd
updates on your npm branch look good, send me a pull request when you're ready
thing I was happy with was I implemented Moustache templates which could reference other moustache tmpleates, and the client would fetch the template and then render
you could have 20MB of tempaltes on the server and it was fine
nice
ok, I'm heading out now
I see you struggling with install problems in the list. Is that why the change of heart WRT npm? :)
I'll send a request. I'm working on a nontrivial fix now to expose the API when you run require('kanso')
I'm not sure what require('kanso') should do atm
think it merits discussion
ok, I'll be back on in a bit
discuss later
guess would be instead of require('kanso/foo') you now do require('kanso').foo
:)
np
back online for a bit if you want to discuss any npm details
I think I have a nice fix for the autocompleter
was a problem with it?
the current install script is just hacky?
Yeah, it just uses $NODE_PATH and $KANSO_DIR
found a cool feature, you can have a "scripts" object in package.json
the relative path to any Node script
you can run `npm script kanso foo` and it will run the foo script
is presumably in your $PATH already so... awesome
I think I removed the autocomplete.sh
other words, if NPM installs your package, then any script in your entire project is potentially available to users and you don't have to resolve basenames, dirnames, and all that nonsense
me check
hm, it's in the dev branch
almost have it working FWIW. About to submit a pull req
ok, you're right
there
I don't think its needed
yes, we should spend this time on the API
right, api
first thing I noticed is you completely deleted the Makefile.
yeah, screw makefiles
;)
Yeah
can now run the tests as "nodeunit test"
had stuff to run the tests, but yeah as a Kanso user, I personally won't miss it
we don't to path hackery
oh, nodeunit needs to be in the devedependencies then
can do npm install --dev I think
ok
you get those extra packages and you have a self-contained test system
ACTION makes a list
does npm do when you require('npm')
feel like it has a similar project structure
I think there is some bootstrapping which is by necessity nonstandard
ok
like it exposes the commands
the upshot is, once it's installed you just have an "npm" package like any other
note, it is *globally* installed which is really a completely different thing from local installs
if require('kanso') should return lib/packages.js
expected, require('npm') throws a not-found error
(and rename lib/packages.js)
it has useful high-level stuff like loading a directory
design docs
Right, so in the existing stable release, require('kanso') doesn't do anything
right
Oh! btw, I removed all requires accessing the kanso core repository code from kanso packages
I'm thinking you can have it be whatever you want. But besides you, I think nobody has any expectations whatsoever about what require('kanso') shoudl return
now all use a separate repository called kanso-utils
what is kanso-utils?
that the old require('kanso/*') stuff?
the modules.js and attachments.js modules from the current release
weren't actually being used by kanso itself
by some packages
now, those packages just include kanso-utils in their node_modules dir
a lot cleaner to me
only bit that's messy is the node-couchapp package
expects require('couchapp') to work
Right, in particular because globally-installed packages are counterintuitively not avaiable for require()
well, they should be inside build-steps
require('kanso') would only work for a program which had *locally* installed kanso into its ./node_modules/
is the only time you'll be using node's require
right
Okay, so I guess require('kanso') is really up to you then. Hardly anybody will use it for the foreseeable future
so, in summary, it really doesn't matter what require('kanso') returns
like require('npm')
yes, that ^
:)
we just leave it doing nothing?
is that bad?
think that's fine. There is currently a "main" entry in package.json which is a dangling pointer
as well remove it
ok, just remove it
now it's the kanso-utils package
right
http://github.com/kanso/kanso-utils
is an npm package, not a kanso package (for clarity)
guess you have freedom to do requrie('kanso-utils/attachments')
yes
that's what I'm doing atm
(oh right, the kick bot is watching us :)
I've not made that patch to kanbot yet ;)
it's a small package, that might work. However since this is breaking package developers' API anyway, you might take the opportunity to consider changing it
don't really have an opinion now that it's its own npm package
nice thing about require('kanso-utils').attachments vs. require('kanso-utils/attachments') is that in the latter case you are *forced* to have an attachments.js in the top-level
yeah, the kanso-utils package could probably use a better structure
I'm happy to accept a pull request on kanso-utils if you think there's a better structure
the former case, it's slightly uglier IMHO, but you have no restrictions for directory layout, because...
1. package.json has a "main" which can point to anywhere
(but I've already updated the packages using kanso-utils with the current api)
2. That main module can require() from anywhere and export those
right
yes, I can that it's more flexible
I also don't see the kanso-utils npm package getting very complex
I'd hate to see Kanso become designed by committee so don't feel like I'm insisting
important thing for me is you can install *kanso* with one command
yes, that's the aim of this whole npm thing :)
do "npm link", which is nice
I guess that concludes the API talk. I was worrying about something that is not even relevant anymore
think we've achieved better separation of packages from kanso core too during this process
yes, I am working from `npm link` all the time now
too :)
Right, I didn't even realize the utils were so decoupled
think npm support is looking pretty good now
there might be a few tweaks left, but the main thing is testing it
my list I have:
* Fix problem with "parser" -- is that fixed? I saw some github activity
think I got floby to publish to npm
me check
yep
parser is up to date and working with 0.6.x
like you updated it this past friday
v0.1.2. That's good enough?
yeah
is currently in dev branch
that's the right one
ok
ACTION checks it off
on the list
* From a Git checkout, `npm link` works
sure that's complete
that's what I'm doing atm
hopefully that's all good
* From a GitHub automatic .zip from a tag, `npm install` works
sure that will work too but I'll test it
yeah, that's a good one to test
item is `npm --global install kanso` works
don't think I've tried that yet
I guess int he next couple days publish this 0.1.2-npm tag
we can see how it looks
0.1.2 *is* the npm version
oh, no other fixes?
few small things
is that unrelated OSX fix for `kanso publish` *shrug*
anyway, 0.1.2 would supersede 0.1.2-npm
if 0.1.2-npm is broken, we could try to push 0.1.2-npm2, -npm3, etc
we get it right
option is just publish it and if its broken then run `npm unpublish`
of one...
let's just make it 0.1.2 at this stage, anything else implies it can slip
That's all I have. Today I added to drop nodeunit in the dev dependencies and remove the "main" entry which is very minor. And I'll wrap up the autocomplete script fix
yeah
doubt there will be problems. That's the nice thing about NPM is things tend to work universally
yeah
I am not too proud to npm unpublish, myself
you on osx?
I'm OSX in the morning and Ubuntu in the afternoon
(spend mornings in a cafe)
ok, tried npm branch on both?
I'm pretty sure I have. My commit ids indicate which computer I'm using (air) vs. (work)
I think I saw both in the logs
the problems with kanso so far seem to be differences between osx and ubuntu
I just use ubuntu
added "test on ubuntu" to the checklist
to really exercise every option probably requires just shipping and letting users use it
think the next release after this will be moving to the node tar module used by npm
that or re-publishing stuff, re-signing up, etc.
I'm happy to release and let users test
hear Isaac tell it, shelling out to tar in a portable way is a disaster
yeah
I'm starting to find that out already
said by building a package manager, you are slated to learn a lot of painful lessons :)
:)
That's the cost of the aforementioned wide-open field though
moving to isaacs tar module we'll be closer to getting a windows version too
I suspect there will be a lot of work to get the working
we dont' want to learn painful lessons, we can write subclasses of subclasses of subclasses of Java interfaces for The Man
yeah
windows support should definitely be a goal
Yeah
just need to recruit some windows devs to help out, because I have no idea about windows
Oh, while I've got you.. is there a fundamental reason why there can't be packages that *only* have attachments instead of both ddoc fields *and* attachments?
I'm interested in making kanso packages for several client side libraries, just so that its easier to organize them and track dependencies. Basically just use kanso.json to specify dependencies, then Kanso will just bundle it up
think it would be awesome to just drop "dependencies":{"yui":"3.x"} and now the client side has yui
you can use *only* attachments, but not as commonjs modules
thought that wasn't possible at present
{"attachments": null}
should say, I want Kanso to bundle it up for me so in the browser I can say require('yui')
riiight
(I am prepared to do the work to convert yui to CommonJS)
yeah, if you want kanso to bundle it and add require, that's not supported
(which usually means writing a thin wrapper)
it should be :D
so, attachments:null
that, I didn't understand you properly
attachments: ["my_yui.js"]
think we need to modify the modules package
I could make that itself a kanso package called "yui"?
won't bundle and create require('yui')
that, we need to do some work
sure how to mark up the difference between normal and client-side only modules in kanso.json
thoughts?
be a pretty simple change once we work out what the api should be
it'll use the modules package to do it I think
did you see the new http://kan.so homepage btw?
i saw the homepage. good call.
the sun rays coming over the horizon?
;)
in the right direction
pop
then they disappear?
uhhm, they're not meant to disappear
might have to turn off the css animation
slick here
people seem to have problems with it
css animation?
need my PPP (push, prep, promote) tool
...which does not exist
:)
very slow movement of the rays
only on chrome/safari
ah
do see it
it's nice and slow :)
:)
didn't want to distract from the real content
call
seems to screw up on quite a few people's browsers
would be obnoxious if it was fast.
don't want to turn it off :(
would you use anything but chrome? :)
even happens on some chrome installs
think it might depend on your system too
just browser version
ah
I'd only turn it on for known working browsers
Okay, I think you understand what I'm saying but I made this gist https://gist.github.com/1500038
Yes the rays move "real time"
so, wait 24 hours
:)
know, I know... yet another JS packager
yes, that's what I thought too
should make that happen :)
must be too new to the js world. are there a million js packagers?
However, it would allow for lots of really simple and obvious and useful contributions of packages
to node, people grabbed some well-known library like underscore or Mustache, and they just made it CommonJS and published a package
yeah, I used the backbone package on the kan.so repo today
think XKCD's standard cartoon applies aptly
ah
http://xkcd.com/927/
to just do dependencies: {"backbone": null}
exactly
than hunting down the file and adding as attachments
like, request(), it makes no sense to clog up the ddoc
yes, true
YUI? Fugheddabout
standardizing is hard. :)
you could say, if you use Kanso, you have all of the major client libraries available to you with one line of code
:D
How does your module wrapper work? Is it hand-made?
yes
cool
http://github.com/kanso/modules
I'm a RequireJS fan but I think I am the only one.
is my require implementation:
https://github.com/kanso/modules/blob/master/build/bootstrap.js
nice and short ;)
could live without it, and that's fine. But one point they made that I keep thinking about is, in production, you usually can't get away with bundling *everything* in one huge chunk
yeah, that would require async module definitions
you might have "core" code which every page would require. Then there might be "comment" libraries where any time you are on a comment page, those must be loaded
etc.
thing I'm concerned about if I use Kanso a lot is, requirejs in development gives you each file individually
exceptions and stuff reference filenames and line numbers and they actually mean what they say
whatever, Kanso is a 1,000% improvement on couchapp productivity
yes, I'm interested in improvements to the module wrapper
I'll think about how it would feel to write such a package
a new entry in kanso.json?
how about you write a package, and I make it work
?
Yeah
way to develop apis ;)
"resources":{ "jquery": "./jquery-1.7.1.js"
sure
I"ll write a package!
:)
a think about it and we'll discuss
can i jump in with an async question?
said he thought Ender was really good
I think Isaac is really smart. So I dont' want to make a move until I understand Ender
ok, signing off. Thanks!
laters
about to head out myself, but shoot
i misusing parallel?
http://pastie.org/3044027
(i think this is a quick question)
fails
part the coffeescript build step
works when i do it like this
http://pastie.org/3044036
http://pastie.org/private/d6bkm2zfoh3yschjtex3dq
you're not using the right callbacks
ohh
figured it was something like that
you
coffeescript precompiler just got a lot more legible
think you can also change this to: http://pastie.org/private/gemxs0pwsqrrckikf3ojhg
ah
i'll give it a go
does work
nice
/db/_desgin/ddoc/_rewrite/kanso.js is returnin 404; https://skitch.com/enherit/g16w8/it-worked
idea why?
nrw
hi
how's the couch hacking?
a million dollar app yet?
good
yet
:)
damn, was going to ask for some money :p
:)
app debuts on february 25th
… and i have a long way to go
the deadline?
it's a competition manager for ballroom dance competitions
i have a comp booked
brave organizer took a chance on me
nice
:)
don't really know how these competitions work, does it keep scores?
app does 3 things:
an organizer to setup a comp
dancers to register for a comp
allows judges to judge the comp
so, it keeps scores, controls comp flow
results
results for a recurring comp
cool, I can see why you have a way to go yet ;)
:)
to license it, or giving it free to the ballroom dancing community?
want to open source it and sell hosted options for big comps
good :) ...I guess most ballroom comp admins don't know enough to set up couchapps ;)
don't want to end up failing to make a living off of it, though
yeah
that's the thinking
fun
i'm now trying to hook up server push actions from couchdb, so judges marks show up in real time
you know a good article to get me started on that?
hmmm
don't know how couch's push features work...
i know they're there.
enough to do
basically long polling to /_changes
db module has a changes function
it calls a function whenever a document changes
ah
can also filter the notifications so you only get updates about specific docs
sweet
polling == push?
I'm planning to update the changes api in the db modules soon, but it should be easy to convert
*reads http://en.wikipedia.org/wiki/Push_technology#Long_polling*
polling is when you make an ajax request to couch
it stays open
ok
so, similar to push
(up until the browser's timeout, usually 30 secs)
open connection
right
when something changes, couchdb writes to the response
it'll close the connection and reopen
cool
it times out it also reopens
so, it has the exact same effect as push
excellent
yes
worried me a second there, with the mention of "timeout"
:)
since it asks for all changes since a specific update number, you won't miss any changes in the gap between getting a response and reconnecting
perfect
is a fun feature of couchdb :D
i'm excited to play with it
 :)
you working your way to a question/request? or are we just small-talking?
(i'm happy either way)
oh, I'm just making small talk
just don't want to shut you down if you were going somewhere with this :)
I'm not
with the small talk, then: i'm concerned about securing my couchapps
continue with whatever you were doing
yes
can be tricky
in a couchapp is possible, yes?
what you want and whether you're willing to add additional processes
hm
to describe the situation
we can work it out
just need to secure user data… make it inaccessible to almost everyone, and easily accessible to a few
5 specific users will need to be able to access a doc
ok, sounds possible
i need to be able to give new users access to that doc, or remove access
think that description covers all of my use cases.
i missing any key pieces of this description? :/
the admin add the users that have priviledges on this doc?
that would basically solve it
say this in terms of a dance comp
problem atm is that you need a priveledges process to add priveleged users
couchapps have no priveledges processes
organizer needs to be able to edit a comp
oh
hmm
with the description
me outline the scenario and maybe you'll see a solution :)
yeah
competition organizer needs to be able to add and edit a comp and it's events. They also need to be able to grant other users permission to edit the comp (presumably their "team").
the team changes, they should be able to remove members, too.
clear?
yep
I'd say give each organizer / comp it's own database
wow
really
?
own complete couch instance ideally
eek
they can manage users and roles
oh
see
are about 20,000 ballroom competitions in the world, and i'd like to run them all...
ok
many can i realistically run on one instance?
problem you have is that they share a user db
oh
right
you can't have one user grant admin to another comp
ok, maybe we can work around that
you'll have to introduce another process
have a thought:
that's not a big deal if you're offering this as a hosted service
would like to allow dancers that are registering for a comp to be able to reuse their account to register for other competitions.
ok
right, new idea then
:)
have one instance (or a cluster of replicating instances)
have one _users db
you care about read access to some files?
do you only need to control writes?
would like to protect some info
reads
can do without, if that makes it way easier
protecting reads is preferred
controlling read access is like channels on irc, you protect info by only posting it to a channel some people are allowed to use, not by protecting an individual message
this example a channel is a db in couch
can be shared by some users
ohhh
that's the only way to protect reads, unless you do some public key encryption
ack
of that :)
right
think the "channel" model could work for me.
ok, that's the way to think about couchdb read control
follow.
i'm still trying to overlay that idea with my current design. :)
I think you'll need another process which has an admin account
do you mean by "another process"?
you can post specific commands to this process
well, probably another web server
that's not couch?
right
rats.
:)
can tell couch to proxy to it
ok
your couchapp can speak to it over ajax
will minimize maintenance, i think.
yes, its a good model
you to develop in a way that can scale more easily too
if it goes down, no big deal, the main site still works
additional process would add roles to users
create 'channels' (dbs)
assign certain roles access to those dbs
a comp organiser signs up
get a new db with comp data
can then tell this process to add the admin_comp_one role, but only that role
(the comp they are admin for)
think i follow. :)
or false: the only way to add roles to a user is from a logged in admin account.
true
ok
i follow
understand the purpose of the external process, too
you need admin priviledges to add roles
can either be a human being, or an external process
gotcha
so, in the interest of simplification...
my model become much simpler if only the creator of a comp needs to be able to edit it?
can control write access at the document level
right
reads was the problem
right
ACTION grumbles
is the first downside of couchdb i've found
:)
provided you don't mind users seeing every comp and every user signed up to it, its easy
;)
don't mind all of that, actually...
hmm
you can easily control who can edit a 'comp' document, for example
one thing i mind is access to read all of the contact info of each person
yeah, that needs to be private
you'll need extra databases for that
hm
i'm hunting for a way to do this without an external process… just in case i can...
wonder if i can get away with not gathering personal info...
question:
i no longer need to protect reads, is making each comp it's own database sufficient to control writes?
(still unsure if i understand how this works)
don't even need to do that to control writes if you keep a comp in a single document
ok
level write control
need a way to link a user to a comp to see if they can write
can do that with roles
it seem like a better design to you?
use a db per comp?
you can do that when they edit the comp document
db per comp solves a lot of issues
also allows me to replicate a comp to and "on-site" instance
you would find it more difficult to have high-level stats etc
you'd have to have them all replicate to a central db
replicating all comps...
run stats on that
hm
think i can manage replicating them all to a central db...
you'd need a public comp db and a private comp db
private one for storing contact info
public so users can sign themselves up
that's a lot of databases...
yeah, it gets tricky with completely public apps
doable, but you end up adding extra services
a fun puzzle :)
its not just a couchapp, but some extra services too
i have a private db of contact info...
each user has some unique id...
could avoid storing two databases for each comp
person's contact info is rarely needed...
can't think of a time that i would want to read it.
ok, you'd need a private db for each comp though
just seems like something that a comp organizer would want. :)
see the value of a private db for each comp
yes
we just went from 40,000 dbs to 20,001.
:)
hehe
progress
you think the main public db would be shared for all comps?
ok to me, provided you only want to control writes at the comp document level
couch can handle 20k db's no prob ;)
sweet!
think i like that design...
sure about them all continuously replicating, but we'll see
it's still a new idea, so i have some mulling to do...
fact, you don't need to replicate the private dbs
you're not interested in that
easy!
think i missed something. :(
what's in the "private dbs"?
have one public db per comp, right?
only one private user database
oh, I thought you had one public db for all comps
one private per comp
ohh
makes more sense
then you have channels for read only access
a share public db for high-level analytics etc
so, one "public db" is not one couch instance
it's one db
yes
that's the part i misunderstood :)
you'll have 1 couch instance with 20,001 dbs
:)
(or perhaps multiple, depending on your load)
right
don't have a concept for how comp data gets from a private db to the public db
doesn't
stays in the private db
the public db reads the private dbs?
your couchapp running on the public db requests it from the private db
alright!
perfect
the user needs read access to the private db
now, the tricky part is signing up a comp admin
need to create a new private db and give that user access
you do that?
you'll be getting payment?
personally?
than a process?
whoever adminsters this whole system
ideal setup allows self-serve comp creation
other option is an external process
i could do it
does billing and signs up users with a new private db
I'd say do it personally at first
right
create an automatic process if needed
anyway, that setup gives you the option to automate it
follow
adding a billing processing server
you don't need to rewrite your app now?
:)
might :)
hehe
think i'm clearer (for now) on access control, but i see another issue...
i'm going to share
:)
currently have all comps in one db
comp has instances (insts) that allow it to be a recurring competition
i'm not sure how to handle that with multiple dbs
it's easiest to control only the active inst
then i need a mechanism to connect insts to each other as part of the same comp
thoughts?
assign a private db to a paying user, rather than a comp specifically?
hmm, not sure I'm following
ok
try again
:)
a comp happens annually, i want to be able to show on the public db "results for this comp from the last 3 years"
when i run a comp, i only interact with the current year's instance
oh, ok... that sounds doable
just need some way to identify multiple docs as part of the same series
you see insts as docs, and comps as dbs?
insts as dbs?
could be a few ways to do this
ACTION waits patiently
honestly think private dbs are related more to the people viewing the data than the data in them
can add views and filters to private db docs just like you can to a shared public db
gotcha
reason not to store multiple comp docs in the same db
different people should have access to the db depending on the inst
hm
the current inst should be editable
don't think that's an issue
that's not an issue
I'm saying, should the same people be able to see contact info for users in inst1 as in inst2?
so, just re-use the same private db
yes, that's fine
feel like we need a whiteboard
can re-use the db
:)
great
do need a whiteboard!
so, there are two options for multiple insts
1) extend the existing comp doc with new dates/times/venues
...so it'll be an array of competition instances on the comp doc
2) create a new doc for each inst, with details copied over from the previous inst
details are you thinking need to be copied?
oh
see
and times
venue
right, name and venue are likely to be the same
indeed
app already has insts as individual docs
i'll leave that :)
just need to split them into dbs
think i can get away with *not* collecting personal info
having everything be public
it simple for v1 ;)
this a scenario where everything should live in one db?
amen!
yes
public is very easy to do
that's how it works now!
yay!
:P
haha
full-circle
doesn't work all that well, yet :)
*will* need to secure it at some point...
it's good to know what i'm up against
can i minimize the pain later?
secured structure is only different in the user db and where a comp's docs live
seems doable...
v2 :)
yeah, I think understanding how it'll work means you can code it in a way that's easy to add security to
the user db public?
yes
just requested _users?include_docs=true
can make it private
i don't get a list of users
/_users/_all_docs?include_docs=true
?
oh, right, it's a db
:)
hehe
I say, you can make it private and logins still work
you can't have users sign themselves up
grr
:)
(because they don't have access to the users db to create their user doc
yeah, it's almost like couch wasn't originally designed as an application server ;)
:)
we'll see to that
anyone working on making a permission process for couch?
quite tricky
think its been looking into before
I'd like to reopen the discussion on doc-level read contorl
*control
would solve all of my problems :)
makes things like replication and view caching etc quite tricky
a major change to the way couchdb works
I'd like to talk it over with someone who knows couch internals better than me
that's right… you can't reuse a view if different users need to see different things...
only piece of info i need from the user is their email
common use case
i'm wondering if i can just ajax that to a mailchimp list on signup and avoid making another piece to maintain...
work :)
think JasonSmith had a write-only patch for couch that let you write to a private db without being able to read the docs in it
be useful to gathering emails
really?
idea if that made it into couch upstream though
details?
guess it would be controversial
for couchapp devs though
is the controversy?
implmementation was more controversial than the objectives
brb
had a whitelist of acceptable HTTP requests that could write, and they wanted it pushed down below the HTTP layer
is that a big deal?
Definitionally.
https://issues.apache.org/jira/browse/COUCHDB-1287
is a well-worded issue report
this is an interesting dicussion, too.
discussion*
I wrote up some notes about packages for client libraries. I moused over the "Syntax guide" link and saw the '#' and thought it was safe to click. So I clicked. Lost my work.
s/some notes/some notes on the kan.so wiki/
ack! i've had that happen on the kan.so wiki too...
caolan, nrw: i'd like to express the gratitude for the discussion, the couchdb multitenancy is what I was thinking about for last few weeks, and I will need to solve it somehow quite soon (right now I'm working on a single user prototype). I already invented some wheels, but it was great to read you filling up the blanks. Thanks!
glad i chose to ask my questions in public. :0
:)
to be a popular pain point
I never ever click on anything without doing select-all, copy first
It's a good idea. I was disoriented because there is some sort of right-click bug on kan.so
nrw: ok, I need to add a warning before leaving the edit page
for the lost work
useful link: http://wiki.apache.org/couchdb/ExternalProcesses you can write a script and talk JSON to it. Or HTTP if you wish. I'm planning to use it for user administration.
it looks your implementation of an inbox has been shot down without an alternative being offered. did i misunderstand that thread?
thanks. i'll give this a look.
alternative. Each person scratches their own itch
am optimistic that it will be included by CouchDB 1.2
"petebd" in this channel?
does the timeline to 1.2 look like?
gives me a good reason to learn deeper parts of CouchDB. I'm pretty comfortable with the HTTP stuff and the Javascript stuff but not the storage parts
fact: The entire CouchDB source code is about 20% of the size of SQLite
wow
I'm not sure there is a roadmap yet
is why I can make vaporware annoucements :)
\o/
yay
:)
that case, i'll probably add some features to 1.2 as well.
So you're okay with there being two commands installed in the PATH now? kanso and kanso_completion?
well, no wonder, SQLite is written in C and Couch is in Erlang. I wrote 3K lines in Erlang recently which were roughly equivalent to approx 10K lines of C code and it was pretty low level Erlang. For higher level stuff the ratio would be much higher.
That's true but SQLite is an embedded database and Couch is a full HTTP server
(Although that may be unfair because it uses a library for the HTTP stuff)
I'd say that adding HTTP to SQLite is like 200-300 LOC :-)
right
libcurl - 20-30 LOC :-D
are you working around the lack of "inbox" functionality, presently?
ACTION wonders who will need SQLite with HTTP...
how?
actually uses libcurl and they use it to implement their own XMLHttpRequest so you can run the Javascript test suite from teh command-line
No, I did it because Chris Anderson once said would be cool. And I like the way he thinks. And also my mission is basically to make CouchDB not have 1,000 papercuts
reason I wrote the CORS patch
i wonder how many people say this "I did it because Chris Anderson once said would be cool."
probably everybody who was ever involved in TED said that
of course I'm referring to the other Chris Anderson
just got that...
:)
!= TED's chris anderson
it's a noble goal to stomp out one little inadequacy at at time. if you were gonna work around the inbox problem now would you hand user management over to another process?
i'm trying to find the path of least resistence...
get the effect of the "inbox" feature you outline in your issue report.
no, I don't mind two commands addded to the paht
*path
solution seems sensible
Hm, does my npm request not merge cleanly anymore? Let me know and I'll rebase
says it still merges cleanly
https://github.com/kanso/kanso/pull/337
I've just not got around to merging yet ;)
see what's happening. I can't see whether it merges cleanly or not. Seems like GitHub should let the requester see that so they can be polite and preemptively rebase
right, I guessed you could see that
well, its a big green button
:D
mean the big green button that mutates your private project's state? Yeah, no GitHub won't let me push it
;)
as there is a node module for the mailchimp api, that looks like the easiest way to gather email addresses.
is going to make things a bit more rigid...
ACTION feels icky
whoop
have a new IRC channel folks
New IRC channel?
Damn, there is a bug in my package.json. Sending a 1-line pull req
i'm all grouchy about the lack of write-only access in couchdb, so everything is public in version 1.
is there any movement on the inbox feature in the couchdb community? can i lobby for progress on this feature somewhere?
can click the upvote link in the JIRA page
even if it had been merged the day I sent it, it would still need to be rolled out in the 1.2 release
build-couchdb build version 1.1.1?
question
n/m
suppose i need to lobby for the release of 1.2 :)
build-couchdb definitely builds 1.1.1
be by default
yeah, all the cool kids are in #kanso now
i see that the couchbase disease is contagious...
:-)
haha
if you want to push progress for "inbox" functionality in couchdb, you can upvote this issue https://issues.apache.org/jira/browse/COUCHDB-1287
just did :)
I'll be renaming every quarter
to keep up
just did that 30 sec ago :-)
ah
:)
went from 3 to 5 fast :)
ACTION upvotes
so, what did I just upvote?
:p
:)
how do I describe a reference to itself in the couchtypes system? Say, I have a type "location" and it contains uniqreferences to other "locations"
can't figure it out
doesn't handle references to other docs, other than providing some widgets to help create them
uhh, by that I mean they are just ids stored as strings
that's okay
just want to keep all my 'type system' unified
it doesn't compile
The `type` option was not specified,or is not an instance of the `Type` class.
understand it, but can't figure a way to circumvent
ok, I see
feel like this is a question for browndav
he's not online
